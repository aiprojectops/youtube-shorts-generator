@page "/all-in-one"
@rendermode InteractiveServer
@implements IDisposable
@using YouTubeShortsWebApp
@inject IJSRuntime JSRuntime
@inject ScheduledUploadService ScheduledUploadService
@using System.Web

<PageTitle>All-in-One 자동화</PageTitle>

<h1>All-in-One 자동 영상 생성 & 업로드</h1>
<p class="text-muted">영상 생성부터 YouTube 스케줄 업로드까지 한 번에 설정하고 실행하세요.</p>

<div class="container">
    <div class="row">
        <div class="col-md-10">

            <!-- 1. 영상 생성 설정 -->
            <div class="card mb-4">
                <div class="card-header bg-primary text-white">
                    <h4>1. 영상 생성 설정</h4>
                </div>
                <div class="card-body">
                    <!-- 영상 소스 선택 -->
                    <div class="mb-4">
                        <label class="form-label"><strong>영상 소스:</strong></label>
                        <div class="form-check">
                            <input class="form-check-input" type="radio" name="videoSource" id="generateVideo"
                                   @onchange="() => SetVideoSource(true)" checked="@isGenerateVideo" disabled="@(isRunning || hasActiveSchedule)">
                            <label class="form-check-label" for="generateVideo">
                                <strong>새로 생성</strong> - AI로 영상을 생성합니다
                            </label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input" type="radio" name="videoSource" id="useLocalVideo"
                                   @onchange="() => SetVideoSource(false)" checked="@(!isGenerateVideo)" disabled="@(isRunning || hasActiveSchedule)">
                            <label class="form-check-label" for="useLocalVideo">
                                <strong>로컬 파일 사용</strong> - 기존에 있는 영상 파일들을 업로드합니다
                            </label>
                        </div>
                    </div>

                    @if (isGenerateVideo)
                    {
                        <!-- AI 영상 생성 옵션들 -->
                        <div class="row mb-3">
                            <div class="col-md-4">
                                <label class="form-label"><strong>생성할 영상 개수: @videoCount 개</strong></label>
                                <input type="range" class="form-range" min="1" max="10" @bind="videoCount" @bind:after="OnVideoCountChanged" disabled="@(isRunning || hasActiveSchedule)" />
                                <div class="text-primary">총 예상 비용: $@totalCost</div>
                            </div>
                            <div class="col-md-4">
                                <label class="form-label"><strong>영상 길이:</strong></label>
                                <div>
                                    <button type="button" class="btn @GetDurationClass(5)" @onclick="@(() => selectedDuration = 5)" disabled="@(isRunning || hasActiveSchedule)">5초</button>
                                    <button type="button" class="btn @GetDurationClass(10)" @onclick="@(() => selectedDuration = 10)" disabled="@(isRunning || hasActiveSchedule)">10초</button>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <label class="form-label"><strong>화면 비율:</strong></label>
                                <div>
                                    <button type="button" class="btn @GetAspectClass("9:16")" @onclick="@(() => selectedAspectRatio = "9:16")" disabled="@(isRunning || hasActiveSchedule)">9:16</button>
                                    <button type="button" class="btn @GetAspectClass("16:9")" @onclick="@(() => selectedAspectRatio = "16:9")" disabled="@(isRunning || hasActiveSchedule)">16:9</button>
                                    <button type="button" class="btn @GetAspectClass("1:1")" @onclick="@(() => selectedAspectRatio = "1:1")" disabled="@(isRunning || hasActiveSchedule)">1:1</button>
                                </div>
                            </div>
                        </div>

                        <!-- CSV 파일 업로드 -->
                        <div class="mb-3">
                            <label class="form-label"><strong>랜덤 프롬프트 CSV 파일:</strong></label>
                            <InputFile OnChange="HandleCsvFileSelection" accept=".csv" class="form-control" disabled="@(isRunning || hasActiveSchedule)" />
                            <div class="form-text">CSV 파일 형식: 첫 번째 열은 번호, 두 번째 열은 프롬프트 내용</div>

                            @if (csvPrompts.Count > 0)
                            {
                                <div class="mt-2 alert alert-success">
                                    <strong>로드된 프롬프트:</strong> @csvPrompts.Count 개
                                    <button type="button" class="btn btn-sm btn-outline-primary ms-2" @onclick="ShowCsvPreview" disabled="@(isRunning || hasActiveSchedule)">
                                        미리보기
                                    </button>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <!-- 로컬 파일 선택 옵션들 -->
                        <div class="mb-3">
                            <label class="form-label"><strong>로컬 영상 파일들:</strong></label>
                            <InputFile OnChange="HandleLocalVideoSelection" accept="video/*" multiple class="form-control" disabled="@(isRunning || hasActiveSchedule)" />
                            <div class="form-text">하나 또는 여러 개의 비디오 파일을 선택하세요 (각각 최대 2GB)</div>

                            @if (localVideoFiles.Count > 0)
                            {
                                <div class="mt-2 alert alert-success">
                                    <strong>선택된 파일:</strong> @localVideoFiles.Count 개
                                    <ul class="mb-0 mt-2">
                                        @foreach (var file in localVideoFiles.Take(5))
                                        {
                                            <li>@file.Name (@FormatFileSize(file.Size))</li>
                                        }
                                        @if (localVideoFiles.Count > 5)
                                        {
                                            <li>... 외 @(localVideoFiles.Count - 5)개 더</li>
                                        }
                                    </ul>
                                </div>
                            }
                        </div>
                    }
                </div>
            </div>

            <!-- 2. 후처리 설정 -->
            <div class="card mb-4">
                <div class="card-header bg-success text-white">
                    <h4>2. 후처리 설정</h4>
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" @bind="enablePostProcessing" id="enablePostProcessing" disabled="@(isRunning || hasActiveSchedule)">
                            <label class="form-check-label" for="enablePostProcessing">
                                <strong>영상 후처리 사용</strong>
                            </label>
                        </div>
                    </div>

                    @if (enablePostProcessing)
                    {
                        <div class="card bg-light">
                            <div class="card-body">
                                <div class="row">
                                    <div class="col-md-6">
                                        <div class="mb-3">
                                            <div class="form-check">
                                                <input class="form-check-input" type="checkbox" @bind="addCaption" id="addCaption" disabled="@(isRunning || hasActiveSchedule)">
                                                <label class="form-check-label" for="addCaption">
                                                    <strong>캡션 추가</strong>
                                                </label>
                                            </div>
                                            @if (addCaption)
                                            {
                                                <div class="mt-2">
                                                    <input type="text" class="form-control form-control-sm" @bind="captionText" placeholder="캡션 텍스트" disabled="@(isRunning || hasActiveSchedule)" />
                                                    <div class="row mt-2">
                                                        <div class="col-4">
                                                            <select class="form-select form-select-sm" @bind="captionPosition" disabled="@(isRunning || hasActiveSchedule)">
                                                                <option value="top">상단</option>
                                                                <option value="center">중앙</option>
                                                                <option value="bottom">하단</option>
                                                                <option value="random">랜덤</option>
                                                            </select>
                                                        </div>
                                                        <div class="col-4">
                                                            <select class="form-select form-select-sm" @bind="captionSize" disabled="@(isRunning || hasActiveSchedule)">
                                                                <option value="60">작게</option>
                                                                <option value="80">보통</option>
                                                                <option value="120">크게</option>
                                                                <option value="random">랜덤</option>
                                                            </select>
                                                        </div>
                                                        <div class="col-4">
                                                            <select class="form-select form-select-sm" @bind="captionColor" disabled="@(isRunning || hasActiveSchedule)">
                                                                <option value="white">흰색</option>
                                                                <option value="yellow">노란색</option>
                                                                <option value="red">빨간색</option>
                                                                <option value="black">검정색</option>
                                                                <option value="random">랜덤</option>
                                                            </select>
                                                        </div>
                                                    </div>
                                                </div>
                                            }
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="mb-3">
                                            <div class="form-check">
                                                <input class="form-check-input" type="checkbox" @bind="addBackgroundMusic" id="addBackgroundMusic" disabled="@(isRunning || hasActiveSchedule)">
                                                <label class="form-check-label" for="addBackgroundMusic">
                                                    <strong>배경음악 추가</strong>
                                                </label>
                                            </div>
                                            @if (addBackgroundMusic)
                                            {
                                                <div class="mt-2">
                                                    <div class="mb-2">
                                                        <label class="form-label form-label-sm">배경음악 파일들:</label>
                                                        <InputFile OnChange="HandleMusicFileSelection" accept="audio/*" multiple class="form-control form-control-sm" disabled="@(isRunning || hasActiveSchedule)" />
                                                        <div class="form-text">여러 개 선택 가능. 지원 형식: MP3, WAV, M4A, AAC (각 최대 10MB)</div>
                                                        
                                                        @if (selectedMusicFiles.Count > 0)
                                                        {
                                                            <div class="mt-1 alert alert-success py-1 px-2 small">
                                                                ✓ @selectedMusicFiles.Count 개 파일 선택됨
                                                                <ul class="mb-0 mt-1">
                                                                    @foreach (var file in selectedMusicFiles.Take(3))
                                                                    {
                                                                        <li>@file.Name (@FormatFileSize(file.Size))</li>
                                                                    }
                                                                    @if (selectedMusicFiles.Count > 3)
                                                                    {
                                                                        <li>... 외 @(selectedMusicFiles.Count - 3)개 더</li>
                                                                    }
                                                                </ul>
                                                            </div>
                                                        }
                                                    </div>
                                                    <label class="form-label form-label-sm">음량: @musicVolume</label>
                                                    <input type="range" class="form-range" min="0.1" max="1.0" step="0.1" @bind="musicVolume" disabled="@(isRunning || hasActiveSchedule)" />
                                                </div>
                                            }
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>

            <!-- 3. YouTube 업로드 설정 -->
            <div class="card mb-4">
                <div class="card-header bg-danger text-white">
                    <h4>3. YouTube 업로드 설정</h4>
                </div>
                <div class="card-body">
                    <!-- YouTube 계정 상태 -->
                    <div class="mb-3">
                        @if (currentYouTubeAccount == null)
                        {
                            <div class="alert alert-warning">
                                <strong>YouTube 계정 연동 필요</strong>
                                <button type="button" class="btn btn-danger btn-sm ms-2" @onclick="AuthenticateYouTube" disabled="@(isAuthenticating || isRunning)">
                                    @if (isAuthenticating)
                                    {
                                        <span>인증 중...</span>
                                    }
                                    else
                                    {
                                        <span>계정 연동</span>
                                    }
                                </button>
                            </div>
                        }
                        else
                        {
                            <div class="alert alert-success">
                                <strong>연동된 계정:</strong> @currentYouTubeAccount.ChannelTitle
                                <small class="text-muted ms-2">구독자: @FormatSubscriberCount(currentYouTubeAccount.SubscriberCount)명</small>
                                <button type="button" class="btn btn-outline-secondary btn-sm ms-2" @onclick="SwitchYouTubeAccount" disabled="@(isRunning || hasActiveSchedule)">
                                    계정 전환
                                </button>
                            </div>
                        }
                    </div>

                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label"><strong>제목 템플릿:</strong></label>
                                <input type="text" class="form-control" @bind="titleTemplate" placeholder="예: Runmoa #NUMBER" disabled="@(isRunning || hasActiveSchedule)" />
                                <div class="form-text">#NUMBER는 자동으로 #1, #2, #3... 으로 변환됩니다</div>
                            </div>
                            <div class="mb-3">
                                <label class="form-label"><strong>설명:</strong></label>
                                <textarea class="form-control" rows="3" @bind="youtubeDescription" placeholder="영상 설명" disabled="@(isRunning || hasActiveSchedule)"></textarea>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label"><strong>공개 설정:</strong></label>
                                <select class="form-select" @bind="youtubePrivacy" disabled="@(isRunning || hasActiveSchedule)">
                                    <option value="비공개">비공개</option>
                                    <option value="공개">공개</option>
                                    <option value="링크 공유">링크 공유</option>
                                </select>
                            </div>
                            <div class="mb-3">
                                <label class="form-label"><strong>태그:</strong></label>
                                <input type="text" class="form-control" @bind="youtubeTags" placeholder="태그1, 태그2, 태그3" disabled="@(isRunning || hasActiveSchedule)" />
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- 4. 업로드 방식 설정 -->
            <div class="card mb-4">
                <div class="card-header bg-warning text-dark">
                    <h4>4. 업로드 방식 설정</h4>
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <div class="form-check">
                            <input class="form-check-input" type="radio" name="uploadMode" id="immediateUpload"
                                   @onchange="() => SetUploadMode(false)" checked="@(!isScheduleUpload)" disabled="@(isRunning || hasActiveSchedule)">
                            <label class="form-check-label" for="immediateUpload">
                                <strong>즉시 업로드</strong> - 영상 생성 완료 후 바로 순차 업로드
                            </label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input" type="radio" name="uploadMode" id="scheduleUpload"
                                   @onchange="() => SetUploadMode(true)" checked="@isScheduleUpload" disabled="@(isRunning || hasActiveSchedule)">
                            <label class="form-check-label" for="scheduleUpload">
                                <strong>스케줄 업로드</strong> - 지정된 시간에 랜덤하게 자동 업로드
                            </label>
                        </div>
                    </div>

                    @if (isScheduleUpload)
                    {
                        <div class="row">
                            <div class="col-md-4">
                                <label class="form-label">업로드 기간: @scheduleHours 시간</label>
                                <input type="range" class="form-range" min="0.5" max="24" step="0.5" @bind="scheduleHours" @bind:after="UpdateSchedulePreview" disabled="@(isRunning || hasActiveSchedule)" />
                                <div class="form-text">@scheduleHours 시간 동안 업로드를 분산</div>
                            </div>
                            <div class="col-md-4">
                                <label class="form-label">최소 간격: @minIntervalMinutes 분</label>
                                <input type="range" class="form-range" min="2" max="180" @bind="minIntervalMinutes" @bind:after="UpdateSchedulePreview" disabled="@(isRunning || hasActiveSchedule)" />
                                <div class="form-text">업로드 간 최소 @minIntervalMinutes 분 간격</div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-check mt-3">
                                    <input class="form-check-input" type="checkbox" @bind="randomizeOrder" @bind:after="UpdateSchedulePreview" id="randomizeOrder" disabled="@(isRunning || hasActiveSchedule)">
                                    <label class="form-check-label" for="randomizeOrder">
                                        업로드 순서 랜덤화
                                    </label>
                                </div>
                            </div>
                        </div>

                        <!-- 스케줄 미리보기 -->
                        @if (schedulePreviewList.Count > 0)
                        {
                            <div class="mt-3 alert alert-info">
                                <h6>예상 업로드 스케줄:</h6>
                                <ul class="mb-0">
                                    @foreach (var item in schedulePreviewList.Take(5))
                                    {
                                        <li>영상 #@item.Index -> @item.ScheduledTime.ToString("MM/dd HH:mm")</li>
                                    }
                                    @if (schedulePreviewList.Count > 5)
                                    {
                                        <li>... 총 @schedulePreviewList.Count 개</li>
                                    }
                                </ul>
                                <button type="button" class="btn btn-sm btn-outline-primary mt-2" @onclick="UpdateSchedulePreview" disabled="@(isRunning || hasActiveSchedule)">
                                    스케줄 다시 계산
                                </button>
                            </div>
                        }
                    }
                </div>
            </div>

            <!-- 5. 실행 버튼 -->
            <div class="card mb-4">
                <div class="card-body text-center">
                    <button type="button" class="btn btn-success btn-lg px-5" @onclick="StartAllInOne"
                            disabled="@(!CanStart || isRunning)">
                        @if (isRunning)
                        {
                            <span>실행 중...</span>
                        }
                        else if (hasActiveSchedule)
                        {
                            <span>스케줄 업로드 진행 중...</span>
                        }
                        else
                        {
                            <span>🚀 All-in-One 시작</span>
                        }
                    </button>

                    @if (isRunning)
                    {
                        <button type="button" class="btn btn-outline-danger btn-lg px-3 ms-3" @onclick="StopAllInOne">
                            중지
                        </button>
                    }
                </div>
            </div>

            <!-- 진행률 표시 -->
            @if (isRunning)
            {
                <div class="card mb-4">
                    <div class="card-header">
                        <h5>진행 상황</h5>
                    </div>
                    <div class="card-body">
                        <div class="progress mb-3">
                            <div class="progress-bar progress-bar-striped progress-bar-animated"
                                 style="width: @(currentProgress)%"></div>
                        </div>
                        <div class="text-info">@statusMessage</div>
                        @if (!string.IsNullOrEmpty(currentPromptUsed))
                        {
                            <div class="text-muted small mt-1">현재 프롬프트: @currentPromptUsed</div>
                        }

                        <!-- 생성된 영상 목록 -->
                        @if (generatedVideos.Count > 0)
                        {
                            <div class="mt-3">
                                <h6>생성된 영상:</h6>
                                <ul class="list-group">
                                    @foreach (var video in generatedVideos)
                                    {
                                        <li class="list-group-item d-flex justify-content-between align-items-center">
                                            <span>@video.FileName</span>
                                            <span class="badge bg-@(video.IsScheduled ? "success" : "secondary")">
                                                @(video.IsScheduled ? "스케줄 등록됨" : "처리 중")
                                            </span>
                                        </li>
                                    }
                                </ul>
                            </div>
                        }
                    </div>
                </div>
            }

            <!-- 스케줄 진행률 표시 -->
            @if (hasActiveSchedule && !isRunning)
            {
                <div class="card mb-4">
                    <div class="card-header">
                        <h5>스케줄 업로드 진행 중</h5>
                    </div>
                    <div class="card-body">
                        <div class="progress mb-3">
                            <div class="progress-bar progress-bar-striped progress-bar-animated bg-info" style="width: 100%"></div>
                        </div>
                        <div class="text-info">@statusMessage</div>
                        <div class="text-muted small">웹 애플리케이션을 종료하지 마세요. 백그라운드에서 자동 업로드가 진행됩니다.</div>

                        @if (!string.IsNullOrEmpty(nextUploadInfo))
                        {
                            <div class="mt-2 alert alert-info">
                                <small><strong>다음 업로드:</strong> @nextUploadInfo</small>
                            </div>
                        }
                    </div>
                </div>
            }

            <!-- 완료 결과 -->
            @if (!string.IsNullOrEmpty(resultMessage))
            {
                <div class="alert @GetResultAlertClass()">
                    <h5>@GetResultTitle()</h5>
                    <p>@resultMessage</p>
                </div>
            }

        </div>
    </div>
</div>

<!-- CSV 미리보기 모달 -->
@if (showCsvPreview)
{
    <div class="modal show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">프롬프트 미리보기</h5>
                    <button type="button" class="btn-close" @onclick="() => showCsvPreview = false" disabled="@(isRunning || hasActiveSchedule)"></button>
                </div>
                <div class="modal-body">
                    <p><strong>총 @csvPrompts.Count 개의 프롬프트가 로드되었습니다.</strong></p>
                    <div style="max-height: 300px; overflow-y: auto;">
                        @for (int i = 0; i < Math.Min(10, csvPrompts.Count); i++)
                        {
                            <div class="mb-2">
                                <strong>@(i + 1).</strong> @csvPrompts[i]
                            </div>
                        }
                        @if (csvPrompts.Count > 10)
                        {
                            <div class="text-muted">... 외 @(csvPrompts.Count - 10) 개 더</div>
                        }
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="() => showCsvPreview = false" disabled="@(isRunning || hasActiveSchedule)">닫기</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    
    // 영상 소스 설정
    private bool isGenerateVideo = true;
    private List<IBrowserFile> localVideoFiles = new List<IBrowserFile>();

    private bool CanStart =>
        !hasActiveSchedule && 
        currentYouTubeAccount != null &&
        !string.IsNullOrWhiteSpace(titleTemplate) &&
        ((isGenerateVideo && csvPrompts.Count > 0) || (!isGenerateVideo && localVideoFiles.Count > 0));

    // 영상 생성 설정
    private int videoCount = 5;
    private int selectedDuration = 5;
    private string selectedAspectRatio = "9:16";
    private List<string> csvPrompts = new List<string>();
    private bool showCsvPreview = false;
    private Random random = new Random();

    // 후처리 설정
    private bool enablePostProcessing = true;
    private bool addCaption = true;
    private string captionText = "Runmoa.com";
    private string captionPosition = "random";
    private string captionSize = "random";
    private string captionColor = "random";
    private bool addBackgroundMusic = true;
    private float musicVolume = 0.7f;
    
    // 음악 파일 (세션 유지)
    private List<IBrowserFile> selectedMusicFiles = new List<IBrowserFile>();

    // YouTube 설정
    private YouTubeUploader? youtubeUploader;
    private YouTubeUploader.YouTubeAccountInfo? currentYouTubeAccount;
    private bool isAuthenticating = false;
    private string titleTemplate = "Runmoa #NUMBER";
    private string youtubeDescription = "www.runmoa.com";
    private string youtubeTags = "Runmoa, website, 1min";
    private string youtubePrivacy = "공개";

    // 업로드 방식 설정
    private bool isScheduleUpload = true;
    private List<SchedulePreviewItem> schedulePreviewList = new List<SchedulePreviewItem>();

    public class SchedulePreviewItem
    {
        public int Index { get; set; }
        public DateTime ScheduledTime { get; set; }
    }

    // 스케줄 설정
    private float scheduleHours = 2.0f;
    private int minIntervalMinutes = 30;
    private bool randomizeOrder = true;

    // 실행 상태
    private bool isRunning = false;
    private bool isCancelled = false;
    private int currentProgress = 0;
    private string statusMessage = "";
    private string currentPromptUsed = "";
    private string resultMessage = "";
    private bool isResultError = false;
    private List<GeneratedVideo> generatedVideos = new List<GeneratedVideo>();

    // 스케줄 상태 추적
    private bool hasActiveSchedule = false;
    private System.Timers.Timer? scheduleStatusTimer;
    private string nextUploadInfo = "";

    public class GeneratedVideo
    {
        public string FileName { get; set; } = "";
        public string FilePath { get; set; } = "";
        public bool IsScheduled { get; set; } = false;
    }

    private string totalCost => (videoCount * (selectedDuration == 5 ? 0.75m : 1.5m)).ToString("F2");

    private string GetDurationClass(int duration)
    {
        return selectedDuration == duration ? "btn-primary" : "btn-outline-primary";
    }

    private string GetAspectClass(string ratio)
    {
        return selectedAspectRatio == ratio ? "btn-success" : "btn-outline-success";
    }

    protected override async Task OnInitializedAsync()
    {
await CheckExistingYouTubeAuth();
        UpdateSchedulePreview();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                var uri = new Uri(await JSRuntime.InvokeAsync<string>("eval", "window.location.href"));
                var query = System.Web.HttpUtility.ParseQueryString(uri.Query);
                
                if (query["auth"] == "success")
                {
                    try
                    {
                        youtubeUploader = new YouTubeUploader();
                        bool authCheck = await youtubeUploader.AuthenticateAsync();
                        
                        if (authCheck)
                        {
                            currentYouTubeAccount = await youtubeUploader.GetCurrentAccountInfoAsync();
                            await JSRuntime.InvokeVoidAsync("alert", "YouTube 인증이 완료되었습니다!");
                            StateHasChanged();
                        }
                    }
                    catch (Exception ex)
                    {
                        await JSRuntime.InvokeVoidAsync("alert", $"인증 처리 오류: {ex.Message}");
                    }
                }
                else if (query["auth"] == "failed")
                {
                    await JSRuntime.InvokeVoidAsync("alert", "YouTube 인증에 실패했습니다.");
                }
                else if (query["auth"] == "error")
                {
                    string errorMsg = query["message"] ?? "알 수 없는 오류";
                    await JSRuntime.InvokeVoidAsync("alert", $"인증 오류: {errorMsg}");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"URL 파라미터 처리 오류: {ex.Message}");
            }
        }
    }

    private async Task CheckExistingYouTubeAuth()
    {
        try
        {
            var config = ConfigManager.GetConfig();
            if (!string.IsNullOrEmpty(config.YouTubeClientId) && !string.IsNullOrEmpty(config.YouTubeClientSecret))
            {
                youtubeUploader = new YouTubeUploader();
                bool authSuccess = await youtubeUploader.AuthenticateAsync();

                if (authSuccess)
                {
                    currentYouTubeAccount = await youtubeUploader.GetCurrentAccountInfoAsync();
                    StateHasChanged();
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"기존 YouTube 인증 확인 실패: {ex.Message}");
        }
    }

    private void SetVideoSource(bool generateVideo)
    {
        isGenerateVideo = generateVideo;
        if (!generateVideo && localVideoFiles.Count > 0)
        {
            videoCount = localVideoFiles.Count;
        }
        OnVideoCountChanged();
    }

    private void SetUploadMode(bool scheduleUpload)
    {
        isScheduleUpload = scheduleUpload;
        if (scheduleUpload)
        {
            UpdateSchedulePreview();
        }
    }

    private void OnVideoCountChanged()
    {
        if (isScheduleUpload)
        {
            UpdateSchedulePreview();
        }
        StateHasChanged();
    }

    private async Task HandleCsvFileSelection(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file == null) return;

        try
        {
            const long maxSize = 5 * 1024 * 1024;
            if (file.Size > maxSize)
            {
                await JSRuntime.InvokeVoidAsync("alert", "CSV 파일이 너무 큽니다. 5MB 이하의 파일을 선택해주세요.");
                return;
            }

            using var stream = file.OpenReadStream(maxSize);
            using var reader = new StreamReader(stream);
            var content = await reader.ReadToEndAsync();

            csvPrompts = ParseCsvContent(content);

            if (csvPrompts.Count == 0)
            {
                await JSRuntime.InvokeVoidAsync("alert", "CSV 파일에서 유효한 프롬프트를 찾을 수 없습니다.");
            }
            else
            {
                OnVideoCountChanged();
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"CSV 파일 읽기 실패: {ex.Message}");
            csvPrompts.Clear();
        }
    }

    private List<string> ParseCsvContent(string content)
    {
        var prompts = new List<string>();
        var lines = content.Split('\n', StringSplitOptions.RemoveEmptyEntries);

        for (int i = 1; i < lines.Length; i++)
        {
            var line = lines[i].Trim();
            if (string.IsNullOrEmpty(line)) continue;

            var columns = line.Split(',');
            if (columns.Length >= 2)
            {
                var prompt = columns[1].Trim().Trim('"');
                if (!string.IsNullOrWhiteSpace(prompt))
                {
                    prompts.Add(prompt);
                }
            }
        }

        return prompts;
    }

    private async Task HandleLocalVideoSelection(InputFileChangeEventArgs e)
    {
        localVideoFiles.Clear();
        localVideoFiles.AddRange(e.GetMultipleFiles(20));

        const long maxSizePerFile = 2L * 1024 * 1024 * 1024;
        var invalidFiles = localVideoFiles.Where(f => f.Size > maxSizePerFile).ToList();

        if (invalidFiles.Any())
        {
            await JSRuntime.InvokeVoidAsync("alert",
                $"다음 파일들이 2GB를 초과합니다:\n{string.Join("\n", invalidFiles.Select(f => f.Name))}");

            localVideoFiles = localVideoFiles.Where(f => f.Size <= maxSizePerFile).ToList();
        }

        if (!isGenerateVideo)
        {
            videoCount = localVideoFiles.Count;
        }

        OnVideoCountChanged();
        StateHasChanged();
    }

    private async Task HandleMusicFileSelection(InputFileChangeEventArgs e)
    {
        selectedMusicFiles.Clear();
        
        var files = e.GetMultipleFiles(10); // 최대 10개
        
        try
        {
            const long maxSize = 10 * 1024 * 1024; // 10MB per file
            
            foreach (var file in files)
            {
                if (file.Size > maxSize)
                {
                    await JSRuntime.InvokeVoidAsync("alert", $"{file.Name}이 너무 큽니다. 10MB 이하만 가능합니다.");
                    continue;
                }
    
                string[] supportedTypes = { "audio/mpeg", "audio/mp3", "audio/wav", "audio/mp4", "audio/aac" };
                if (!supportedTypes.Contains(file.ContentType.ToLower()) && 
                    !file.Name.ToLower().EndsWith(".mp3") && 
                    !file.Name.ToLower().EndsWith(".wav") && 
                    !file.Name.ToLower().EndsWith(".m4a") && 
                    !file.Name.ToLower().EndsWith(".aac"))
                {
                    await JSRuntime.InvokeVoidAsync("alert", $"{file.Name}은 지원되지 않는 형식입니다.");
                    continue;
                }
                
                selectedMusicFiles.Add(file);
            }
            
            Console.WriteLine($"=== 음악 파일 선택됨: 총 {selectedMusicFiles.Count}개");
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"음악 파일 선택 오류: {ex.Message}");
            selectedMusicFiles.Clear();
        }
    
        StateHasChanged();
    }

    private string FormatFileSize(long bytes)
    {
        if (bytes >= 1024 * 1024 * 1024)
            return $"{bytes / 1024.0 / 1024.0 / 1024.0:F2} GB";
        else if (bytes >= 1024 * 1024)
            return $"{bytes / 1024.0 / 1024.0:F2} MB";
        else if (bytes >= 1024)
            return $"{bytes / 1024.0:F2} KB";
        else
            return $"{bytes} bytes";
    }

    private void ShowCsvPreview()
    {
        showCsvPreview = true;
    }

    private async Task AuthenticateYouTube()
    {
        isAuthenticating = true;
    
        try
        {
            var config = ConfigManager.GetConfig();
            if (string.IsNullOrEmpty(config.YouTubeClientId) || string.IsNullOrEmpty(config.YouTubeClientSecret))
            {
                await JSRuntime.InvokeVoidAsync("alert", "먼저 설정에서 YouTube API 정보를 입력해주세요.");
                return;
            }
    
            youtubeUploader = new YouTubeUploader();
            
            string currentUrl = await JSRuntime.InvokeAsync<string>("eval", "window.location.origin");
            
            string authUrl = await youtubeUploader.GetAuthorizationUrlAsync(currentUrl, "all-in-one");
            
            await JSRuntime.InvokeVoidAsync("eval", $"window.location.href = '{authUrl}'");
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"인증 오류: {ex.Message}");
        }
        finally
        {
            isAuthenticating = false;
        }
    }

    private async Task SwitchYouTubeAccount()
    {
        try
        {
            if (youtubeUploader != null)
            {
                bool success = await youtubeUploader.SwitchAccountAsync();
                if (success)
                {
                    currentYouTubeAccount = await youtubeUploader.GetCurrentAccountInfoAsync();
                }
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"계정 전환 실패: {ex.Message}");
        }
    }

    private string FormatSubscriberCount(ulong count)
    {
        if (count >= 1000000)
            return $"{count / 1000000.0:F1}M";
        else if (count >= 1000)
            return $"{count / 1000.0:F1}K";
        else
            return count.ToString();
    }

    private void UpdateSchedulePreview()
    {
        if (!isScheduleUpload) return;

        schedulePreviewList.Clear();
        DateTime startTime = DateTime.Now.AddMinutes(5);
        DateTime endTime = startTime.AddHours(scheduleHours);

        int totalVideos = isGenerateVideo ? videoCount : localVideoFiles.Count;

        for (int i = 0; i < totalVideos; i++)
        {
            DateTime scheduledTime = CalculateRandomUploadTime(startTime, endTime, i, totalVideos);
            schedulePreviewList.Add(new SchedulePreviewItem
            {
                Index = i + 1,
                ScheduledTime = scheduledTime
            });
        }

        schedulePreviewList = schedulePreviewList.OrderBy(x => x.ScheduledTime).ToList();
        StateHasChanged();
    }

    private async Task StartAllInOne()
    {
        if (!CanStart) return;

        if (isGenerateVideo)
        {
            var config = ConfigManager.GetConfig();
            if (string.IsNullOrEmpty(config.ReplicateApiKey))
            {
                await JSRuntime.InvokeVoidAsync("alert", "먼저 설정에서 Replicate API 키를 설정해주세요.");
                return;
            }

            if (csvPrompts.Count == 0)
            {
                await JSRuntime.InvokeVoidAsync("alert", "먼저 CSV 파일을 업로드해주세요.");
                return;
            }
        }
        else
        {
            if (localVideoFiles.Count == 0)
            {
                await JSRuntime.InvokeVoidAsync("alert", "처리할 영상 파일을 선택해주세요!");
                return;
            }
        }

        if (enablePostProcessing)
        {
            if (addCaption && string.IsNullOrWhiteSpace(captionText))
            {
                await JSRuntime.InvokeVoidAsync("alert", "캡션 텍스트를 입력해주세요.");
                return;
            }

            bool ffmpegAvailable = await VideoPostProcessor.IsFFmpegAvailableAsync();
            if (!ffmpegAvailable)
            {
                bool proceed = await JSRuntime.InvokeAsync<bool>("confirm",
                    "FFmpeg를 찾을 수 없어 후처리를 할 수 없습니다.\n후처리 없이 진행하시겠습니까?");

                if (!proceed)
                {
                    return;
                }
                enablePostProcessing = false;
            }
        }

        isRunning = true;
        isCancelled = false;
        currentProgress = 0;
        generatedVideos.Clear();
        resultMessage = "";
        isResultError = false;

        try
        {
            int totalVideos = isGenerateVideo ? videoCount : localVideoFiles.Count;
            statusMessage = isGenerateVideo ? "영상 생성을 시작합니다..." : "로컬 파일 처리를 시작합니다...";
            StateHasChanged();

            for (int i = 0; i < totalVideos; i++)
            {
                if (isCancelled) break;

                currentProgress = (i * 80 / totalVideos);
                statusMessage = $"영상 {i + 1}/{totalVideos} {(isGenerateVideo ? "생성" : "처리")} 중...";
                StateHasChanged();

                string videoPath = await GenerateOrProcessVideo(i + 1);

                if (!string.IsNullOrEmpty(videoPath))
                {
                    var generatedVideo = new GeneratedVideo
                    {
                        FileName = Path.GetFileName(videoPath),
                        FilePath = videoPath,
                        IsScheduled = false
                    };
                    generatedVideos.Add(generatedVideo);
                }

                StateHasChanged();
            }

            if (!isCancelled && generatedVideos.Count > 0)
            {
                currentProgress = 85;
                statusMessage = isScheduleUpload ? "YouTube 스케줄에 등록 중..." : "즉시 업로드 시작...";
                StateHasChanged();

                await RegisterToSchedule();

                currentProgress = 100;
                statusMessage = "All-in-One 완료!";

                if (isScheduleUpload)
                {
                    resultMessage = $"{generatedVideos.Count}개 영상이 {(isGenerateVideo ? "생성되고" : "처리되고")} YouTube 스케줄에 등록되었습니다.";
                    hasActiveSchedule = true;
                    StartScheduleStatusTracking();
                }
                else
                {
                    resultMessage = $"{generatedVideos.Count}개 영상이 {(isGenerateVideo ? "생성되고" : "처리되고")} 즉시 업로드되었습니다.";
                }
            }
            else if (isCancelled)
            {
                statusMessage = "작업이 취소되었습니다.";
                resultMessage = "사용자에 의해 취소되었습니다.";
            }
            else
            {
                statusMessage = "처리된 영상이 없습니다.";
                resultMessage = "처리할 수 있는 영상이 없었습니다.";
                isResultError = true;
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"All-in-One 실행 오류: {ex.Message}");
            statusMessage = $"오류 발생: {ex.Message}";
            resultMessage = $"오류로 인해 중단되었습니다: {ex.Message}";
            isResultError = true;
        }
        finally
        {
            isRunning = false;
            StateHasChanged();
        }
    }

    private string GetResultAlertClass()
    {
        return isResultError ? "alert-danger" : "alert-success";
    }

    private string GetResultTitle()
    {
        return isResultError ? "오류 발생" : "All-in-One 완료!";
    }

    private void StopAllInOne()
    {
        isCancelled = true;
        statusMessage = "중지 중...";
    }

    private async Task<string> GenerateOrProcessVideo(int videoIndex)
    {
        string selectedPrompt = "";
        string combinedPrompt = "";
        string videoUrl = "";

        try
        {
            if (!isGenerateVideo)
            {
                if (videoIndex > localVideoFiles.Count)
                {
                    return "";
                }

                var fileToUpload = localVideoFiles[videoIndex - 1];
                currentPromptUsed = $"로컬 파일: {fileToUpload.Name}";

                string tempDir = Path.GetTempPath();
                string fileName = $"allinone_local_{DateTime.Now:yyyyMMdd_HHmmss}_{videoIndex:D2}.mp4";
                string localPath = Path.Combine(tempDir, fileName);

                using (var fileStream = new FileStream(localPath, FileMode.Create))
                {
                    await fileToUpload.OpenReadStream(maxAllowedSize: 2L * 1024 * 1024 * 1024).CopyToAsync(fileStream);
                }

                selectedPrompt = fileToUpload.Name;
                combinedPrompt = currentPromptUsed;

                string finalPath = localPath;
                if (enablePostProcessing && (addCaption || addBackgroundMusic))
                {
                    string processedPath = await ProcessVideoGen(localPath, fileToUpload.Name);
                    if (File.Exists(localPath)) File.Delete(localPath);
                    finalPath = processedPath;
                }

                var historyItem = new VideoHistoryManager.VideoHistoryItem
                {
                    Prompt = selectedPrompt,
                    FinalPrompt = combinedPrompt,
                    Duration = 0,
                    AspectRatio = "로컬 파일",
                    VideoUrl = "",
                    IsRandomPrompt = false,
                    FileName = Path.GetFileName(finalPath),
                    IsDownloaded = false,
                    IsUploaded = false,
                    Status = "All-in-One (로컬 파일)"
                };
                VideoHistoryManager.AddHistoryItem(historyItem);

                return finalPath;
            }
            else
            {
                if (csvPrompts.Count == 0)
                {
                    throw new Exception("CSV 프롬프트가 로드되지 않았습니다.");
                }

                selectedPrompt = csvPrompts[random.Next(csvPrompts.Count)];
                currentPromptUsed = selectedPrompt.Length > 50 ? selectedPrompt.Substring(0, 50) + "..." : selectedPrompt;

                combinedPrompt = ConfigManager.CombinePrompts(selectedPrompt);

                var config = ConfigManager.GetConfig();
                var replicateClient = new ReplicateClient(config.ReplicateApiKey);

                var request = new ReplicateClient.VideoGenerationRequest
                {
                    prompt = combinedPrompt,
                    duration = selectedDuration,
                    aspect_ratio = selectedAspectRatio,
                    resolution = "1080p",
                    fps = 24,
                    camera_fixed = true
                };

                var prediction = await replicateClient.StartVideoGeneration(request);

                var progress = new Progress<ReplicateClient.ProgressInfo>(progressInfo =>
                {
                    InvokeAsync(() =>
                    {
                        int baseProgress = ((videoIndex - 1) * 80 / videoCount);
                        int videoProgress = Math.Min(60, progressInfo.Percentage * 60 / 100);
                        currentProgress = baseProgress + (videoProgress / videoCount);
                        statusMessage = $"영상 {videoIndex}/{videoCount} - {progressInfo.Status}";
                        StateHasChanged();
                    });
                });

                var result = await replicateClient.WaitForCompletion(prediction.id, progress);

                if (result.output != null)
                {
                    videoUrl = result.output.ToString();

                    string fileName = $"allinone_ai_{DateTime.Now:yyyyMMdd_HHmmss}_{videoIndex:D2}.mp4";
                    string localPath = await DownloadVideoForGen(videoUrl, fileName);

                    string finalPath = localPath;
                    if (enablePostProcessing && (addCaption || addBackgroundMusic))
                    {
                        string processedPath = await ProcessVideoGen(localPath, selectedPrompt);
                        if (File.Exists(localPath)) File.Delete(localPath);
                        finalPath = processedPath;
                    }

                    var historyItem = new VideoHistoryManager.VideoHistoryItem
                    {
                        Prompt = selectedPrompt,
                        FinalPrompt = combinedPrompt,
                        Duration = selectedDuration,
                        AspectRatio = selectedAspectRatio,
                        VideoUrl = videoUrl,
                        IsRandomPrompt = true,
                        FileName = Path.GetFileName(finalPath),
                        IsDownloaded = false,
                        IsUploaded = false,
                        Status = "All-in-One (AI 생성)"
                    };
                    VideoHistoryManager.AddHistoryItem(historyItem);

                    return finalPath;
                }

                return "";
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"영상 {videoIndex} 생성/처리 실패: {ex.Message}");

            if (!string.IsNullOrEmpty(selectedPrompt))
            {
                var historyItem = new VideoHistoryManager.VideoHistoryItem
                {
                    Prompt = selectedPrompt,
                    FinalPrompt = combinedPrompt,
                    Duration = isGenerateVideo ? selectedDuration : 0,
                    AspectRatio = isGenerateVideo ? selectedAspectRatio : "로컬 파일",
                    VideoUrl = videoUrl,
                    IsRandomPrompt = isGenerateVideo,
                    FileName = $"실패_{DateTime.Now:HHmmss}",
                    IsDownloaded = false,
                    IsUploaded = false,
                    Status = $"All-in-One 실패: {ex.Message.Substring(0, Math.Min(50, ex.Message.Length))}"
                };
                VideoHistoryManager.AddHistoryItem(historyItem);
            }

            return "";
        }
    }

    private async Task<string> DownloadVideoForGen(string videoUrl, string fileName)
    {
        try
        {
            using var httpClient = new System.Net.Http.HttpClient();
            httpClient.Timeout = TimeSpan.FromMinutes(10);

            string tempFolder = Path.GetTempPath();
            string safeFileName = $"allinone_{Guid.NewGuid()}.mp4";
            string localPath = Path.Combine(tempFolder, safeFileName);

            byte[] videoBytes = await httpClient.GetByteArrayAsync(videoUrl);
            await File.WriteAllBytesAsync(localPath, videoBytes);

            return localPath;
        }
        catch (Exception ex)
        {
            throw new Exception($"후처리용 영상 다운로드 실패: {ex.Message}");
        }
    }

    private async Task<string> ProcessVideoGen(string inputPath, string promptText)
    {
        try
        {
            string outputPath = inputPath.Replace(".mp4", "_processed.mp4");

            string actualCaptionPosition = captionPosition;
            if (captionPosition == "random")
            {
                var positions = new[] { "top", "center", "bottom" };
                actualCaptionPosition = positions[random.Next(positions.Length)];
            }

            string actualCaptionSize = captionSize;
            if (captionSize == "random")
            {
                var sizes = new[] { "60", "80", "120" };
                actualCaptionSize = sizes[random.Next(sizes.Length)];
            }

            string actualCaptionColor = captionColor;
            if (captionColor == "random")
            {
                var colors = new[] { "white", "yellow", "red", "black" };
                actualCaptionColor = colors[random.Next(colors.Length)];
            }

            var options = new VideoPostProcessor.ProcessingOptions
            {
                InputVideoPath = inputPath,
                OutputVideoPath = outputPath
            };

            if (addCaption && !string.IsNullOrWhiteSpace(captionText))
            {
                options.CaptionText = captionText;
                options.FontSize = actualCaptionSize;
                options.FontColor = actualCaptionColor;
                options.CaptionPosition = actualCaptionPosition;
            }

            if (addBackgroundMusic)
            {
                try
                {
                    string musicPath = "";
                    
                    // 선택된 음악 파일이 있으면 랜덤으로 하나 선택
                    if (selectedMusicFiles.Count > 0)
                    {
                        var randomMusic = selectedMusicFiles[random.Next(selectedMusicFiles.Count)];
                        
                        // 임시 폴더에 저장
                        string tempDir = Path.Combine(Path.GetTempPath(), "TempMusic");
                        Directory.CreateDirectory(tempDir);
                        
                        string extension = Path.GetExtension(randomMusic.Name).ToLower();
                        if (string.IsNullOrEmpty(extension)) extension = ".mp3";
                        
                        musicPath = Path.Combine(tempDir, $"music_{Guid.NewGuid()}{extension}");
                        
                        using (var fileStream = new FileStream(musicPath, FileMode.Create))
                        {
                            await randomMusic.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024).CopyToAsync(fileStream);
                        }
                        
                        Console.WriteLine($"=== 선택된 음악 사용: {randomMusic.Name}");
                    }
                    else
                    {
                        musicPath = await VideoPostProcessor.DownloadSampleMusicAsync();
                        Console.WriteLine($"=== 기본 음악 사용");
                    }
                    
                    if (File.Exists(musicPath))
                    {
                        options.BackgroundMusicPath = musicPath;
                        options.MusicVolume = musicVolume;
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"=== 배경음악 준비 실패: {ex.Message}");
                }
            }

            var progress = new Progress<string>(status =>
            {
                InvokeAsync(() =>
                {
                    statusMessage = status;
                    StateHasChanged();
                });
            });

            string processedPath = await VideoPostProcessor.ProcessVideoAsync(options, progress);
            
            try
            {
                if (File.Exists(inputPath))
                {
                    File.Delete(inputPath);
                    Console.WriteLine($"=== 원본 파일 삭제: {Path.GetFileName(inputPath)}");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"=== 원본 파일 삭제 실패: {ex.Message}");
            }
            
            return processedPath;
        }
        catch (Exception ex)
        {
            throw new Exception($"영상 후처리 실패: {ex.Message}");
        }
    }

    private async Task RegisterToSchedule()
    {
        if (isScheduleUpload)
        {
            DateTime startTime = DateTime.Now.AddMinutes(5);
            DateTime endTime = startTime.AddHours(scheduleHours);

            var filesToSchedule = randomizeOrder
                ? generatedVideos.OrderBy(x => Guid.NewGuid()).ToList()
                : generatedVideos.ToList();

            for (int i = 0; i < filesToSchedule.Count; i++)
            {
                DateTime scheduledTime = CalculateRandomUploadTime(startTime, endTime, i, filesToSchedule.Count);

                string title = titleTemplate.Replace("#NUMBER", $"#{i + 1}");

                var uploadItem = new ScheduledUploadItem
                {
                    FileName = filesToSchedule[i].FileName,
                    FilePath = filesToSchedule[i].FilePath,
                    ScheduledTime = scheduledTime,
                    Title = title,
                    Description = youtubeDescription,
                    Tags = youtubeTags,
                    PrivacySetting = youtubePrivacy
                };

                ScheduledUploadService.AddScheduledUpload(uploadItem);
                filesToSchedule[i].IsScheduled = true;
            }
        }
        else
        {
            await StartImmediateUpload();
        }
    }

    private async Task StartImmediateUpload()
    {
        statusMessage = "즉시 업로드 시작...";
        var uploadedUrls = new List<string>();

        for (int i = 0; i < generatedVideos.Count; i++)
        {
            if (isCancelled) break;

            try
            {
                var video = generatedVideos[i];
                string title = titleTemplate.Replace("#NUMBER", $"#{i + 1}");

                statusMessage = $"업로드 중... ({i + 1}/{generatedVideos.Count}) {title}";
StateHasChanged();

                string tempFilePath = Path.GetTempFileName();
                string actualTempPath = Path.ChangeExtension(tempFilePath, ".mp4");
                File.Copy(video.FilePath, actualTempPath, true);

                var uploadInfo = new YouTubeUploader.VideoUploadInfo
                {
                    FilePath = actualTempPath,
                    Title = title,
                    Description = youtubeDescription,
                    Tags = youtubeTags,
                    PrivacyStatus = youtubePrivacy
                };

                var progress = new Progress<YouTubeUploader.UploadProgressInfo>(progressInfo =>
                {
                    InvokeAsync(() =>
                    {
                        int baseProgress = 85 + (i * 15 / generatedVideos.Count);
                        int uploadProgress = progressInfo.Percentage * 15 / 100 / generatedVideos.Count;
                        currentProgress = Math.Max(currentProgress, baseProgress + uploadProgress);
                        statusMessage = $"업로드 중... ({i + 1}/{generatedVideos.Count}) {title} - {progressInfo.Status}";
                        StateHasChanged();
                    });
                });

                string videoUrl = await youtubeUploader.UploadVideoAsync(uploadInfo, progress);
                uploadedUrls.Add(videoUrl);

                video.IsScheduled = true;

                if (File.Exists(actualTempPath))
                {
                    File.Delete(actualTempPath);
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"영상 {i + 1} 업로드 실패: {ex.Message}");
                await JSRuntime.InvokeVoidAsync("alert", $"영상 {i + 1} 업로드 실패: {ex.Message}");
            }

            StateHasChanged();
        }

        statusMessage = $"즉시 업로드 완료! 성공: {uploadedUrls.Count}개";
    }

    private void StartScheduleStatusTracking()
    {
        scheduleStatusTimer = new System.Timers.Timer(30000);
        scheduleStatusTimer.Elapsed += CheckScheduleStatus;
        scheduleStatusTimer.AutoReset = true;
        scheduleStatusTimer.Start();
    }

    private void CheckScheduleStatus(object sender, System.Timers.ElapsedEventArgs e)
    {
        try
        {
            int queueCount = ScheduledUploadService.GetQueueCount();
            var allItems = ScheduledUploadService.GetAllScheduledItems();

            InvokeAsync(() =>
            {
                if (queueCount == 0 && hasActiveSchedule)
                {
                    hasActiveSchedule = false;
                    scheduleStatusTimer?.Stop();
                    scheduleStatusTimer?.Dispose();
                    scheduleStatusTimer = null;

                    statusMessage = "모든 스케줄 업로드가 완료되었습니다.";
                    resultMessage = "모든 영상이 성공적으로 업로드되었습니다.";
                    nextUploadInfo = "";
                }
                else if (hasActiveSchedule)
                {
                    statusMessage = $"스케줄 업로드 진행 중... (대기: {queueCount}개)";

                    var nextUpload = allItems
                        .Where(x => x.Status == "대기 중")
                        .OrderBy(x => x.ScheduledTime)
                        .FirstOrDefault();

                    if (nextUpload != null)
                    {
                        var timeUntil = nextUpload.ScheduledTime - DateTime.Now;
                        if (timeUntil.TotalMinutes > 0)
                        {
                            string fileName = nextUpload.FileName.Length > 30 
                                ? nextUpload.FileName.Substring(0, 27) + "..."
                                : nextUpload.FileName;

                            if (timeUntil.TotalHours >= 1)
                            {
                                nextUploadInfo = $"{fileName} - {nextUpload.ScheduledTime:MM/dd HH:mm} ({timeUntil.Hours}시간 {timeUntil.Minutes}분 후)";
                            }
                            else
                            {
                                nextUploadInfo = $"{fileName} - {nextUpload.ScheduledTime:MM/dd HH:mm} ({(int)timeUntil.TotalMinutes}분 후)";
                            }
                        }
                        else
                        {
                            nextUploadInfo = $"{nextUpload.FileName} - 곧 업로드 예정";
                        }
                    }
                    else
                    {
                        nextUploadInfo = "";
                    }
                }

                StateHasChanged();
            });
        }
        catch (Exception ex)
        {
            Console.WriteLine($"스케줄 상태 확인 오류: {ex.Message}");
        }
    }

    private DateTime CalculateRandomUploadTime(DateTime startTime, DateTime endTime, int index, int totalCount)
    {
        double totalMinutes = (endTime - startTime).TotalMinutes;
        double segmentMinutes = totalMinutes / totalCount;

        double segmentStart = index * segmentMinutes;
        double segmentEnd = Math.Min((index + 1) * segmentMinutes, totalMinutes);

        double randomMinutes = segmentStart + (random.NextDouble() * (segmentEnd - segmentStart));

        if (index > 0 && totalMinutes > (totalCount * minIntervalMinutes))
        {
            var previousTime = startTime.AddMinutes(segmentStart);
            var proposedTime = startTime.AddMinutes(randomMinutes);

            if ((proposedTime - previousTime).TotalMinutes < minIntervalMinutes)
            {
                randomMinutes = segmentStart + minIntervalMinutes;
            }
        }

        randomMinutes = Math.Min(randomMinutes, totalMinutes);

        return startTime.AddMinutes(randomMinutes);
    }

    public void Dispose()
    {
        scheduleStatusTimer?.Stop();
        scheduleStatusTimer?.Dispose();
    }

}
