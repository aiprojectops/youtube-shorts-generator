@page "/all-in-one"
@rendermode InteractiveServer
@implements IDisposable
@using YouTubeShortsWebApp
@using YouTubeShortsWebApp.Services
@inject IJSRuntime JSRuntime
@inject ScheduledUploadService ScheduledUploadService
@inject VideoGenerationService VideoGenService
@inject YouTubeUploadService YouTubeService
@using System.Web

<PageTitle>All-in-One 자동화</PageTitle>

<h1>All-in-One 자동 영상 생성 & 업로드</h1>
<p class="text-muted">영상 생성부터 YouTube 스케줄 업로드까지 한 번에 설정하고 실행하세요.</p>

<div class="container">
    <div class="row">
        <div class="col-md-10">

            <!-- 1. 영상 생성 설정 -->
            <div class="card mb-4">
                <div class="card-header bg-primary text-white">
                    <h4>1. 영상 생성 설정</h4>
                </div>
                <div class="card-body">
                    @if (genOptions.IsGenerateVideo && string.IsNullOrEmpty(ConfigManager.GetConfig().ReplicateApiKey))
                    {
                        <div class="alert alert-warning alert-dismissible fade show" role="alert">
                            <strong>⚠️ API 키가 설정되지 않았습니다</strong>
                            <p class="mb-2 mt-2">AI 영상 생성을 사용하려면 Replicate API 키가 필요합니다.</p>
                            <div class="d-flex gap-2">
                                <a href="/settings" class="btn btn-sm btn-warning">⚙️ 설정하러 가기</a>
                                <button type="button" class="btn btn-sm btn-outline-secondary" @onclick="() => genOptions.IsGenerateVideo = false">
                                    📁 로컬 파일 모드로 전환
                                </button>
                            </div>
                            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                        </div>
                    }
                    <!-- 영상 소스 선택 -->
                    <div class="mb-4">
                        <label class="form-label"><strong>영상 소스:</strong></label>
                        <div class="form-check">
                            <input class="form-check-input" type="radio" name="videoSource" id="generateVideo"
                                   @onchange="() => genOptions.IsGenerateVideo = true" checked="@genOptions.IsGenerateVideo" disabled="@(isRunning || hasActiveSchedule)">
                            <label class="form-check-label" for="generateVideo">
                                <strong>새로 생성</strong> - AI로 영상을 생성합니다
                            </label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input" type="radio" name="videoSource" id="useLocalVideo"
                                   @onchange="() => genOptions.IsGenerateVideo = false" checked="@(!genOptions.IsGenerateVideo)" disabled="@(isRunning || hasActiveSchedule)">
                            <label class="form-check-label" for="useLocalVideo">
                                <strong>로컬 파일 사용</strong> - 기존에 있는 영상 파일들을 업로드합니다
                            </label>
                        </div>
                    </div>

                    @if (genOptions.IsGenerateVideo)
                    {
                        <!-- AI 영상 생성 옵션들 -->
                        <div class="row mb-3">
                            <div class="col-md-4">
                                <label class="form-label"><strong>생성할 영상 개수: @genOptions.VideoCount 개</strong></label>
                                <input type="range" class="form-range" min="1" max="70" step="1" value="@genOptions.VideoCount" @oninput="OnVideoCountInput" disabled="@(isRunning || hasActiveSchedule)" />
                                    <small class="text-muted">1~10: 1개 단위, 11~70: 5개 단위</small>
                                <div class="text-primary">총 예상 비용: $@totalCost</div>
                            </div>
                            <div class="col-md-4">
                                <label class="form-label"><strong>영상 길이:</strong></label>
                                <div>
                                    <button type="button" class="btn @GetDurationClass(5)" @onclick="@(() => genOptions.SelectedDuration = 5)" disabled="@(isRunning || hasActiveSchedule)">5초</button>
                                    <button type="button" class="btn @GetDurationClass(10)" @onclick="@(() => genOptions.SelectedDuration = 10)" disabled="@(isRunning || hasActiveSchedule)">10초</button>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <label class="form-label"><strong>화면 비율:</strong></label>
                                <div>
                                    <button type="button" class="btn @GetAspectClass("9:16")" @onclick="@(() => genOptions.SelectedAspectRatio = "9:16")" disabled="@(isRunning || hasActiveSchedule)">9:16</button>
                                    <button type="button" class="btn @GetAspectClass("16:9")" @onclick="@(() => genOptions.SelectedAspectRatio = "16:9")" disabled="@(isRunning || hasActiveSchedule)">16:9</button>
                                    <button type="button" class="btn @GetAspectClass("1:1")" @onclick="@(() => genOptions.SelectedAspectRatio = "1:1")" disabled="@(isRunning || hasActiveSchedule)">1:1</button>
                                </div>
                            </div>
                        </div>

                        <!-- CSV 파일 업로드 -->
                        <div class="mb-3">
                            <label class="form-label"><strong>랜덤 프롬프트 CSV 파일:</strong></label>
                            <InputFile OnChange="HandleCsvFileSelection" accept=".csv" class="form-control" disabled="@(isRunning || hasActiveSchedule)" />
                            <div class="form-text">CSV 파일 형식: 첫 번째 열은 번호, 두 번째 열은 프롬프트 내용</div>

                            @if (genOptions.CsvPrompts.Count > 0)
                            {
                                <div class="mt-2 alert alert-success">
                                    <strong>로드된 프롬프트:</strong> @genOptions.CsvPrompts.Count 개
                                    <button type="button" class="btn btn-sm btn-outline-primary ms-2" @onclick="ShowCsvPreview" disabled="@(isRunning || hasActiveSchedule)">
                                        미리보기
                                    </button>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <!-- 로컬 파일 선택 옵션들 -->
                        <div class="mb-3">
                            <label class="form-label"><strong>로컬 영상 파일들:</strong></label>
                            <InputFile OnChange="HandleLocalVideoSelection" accept="video/*" multiple class="form-control" disabled="@(isRunning || hasActiveSchedule)" />
                            <div class="form-text">하나 또는 여러 개의 비디오 파일을 선택하세요 (각각 최대 2GB)</div>

                            @if (genOptions.LocalVideoFiles.Count > 0)
                            {
                                <div class="mt-2 alert alert-success">
                                    <strong>선택된 파일:</strong> @genOptions.LocalVideoFiles.Count 개
                                    <ul class="mb-0 mt-2">
                                        @foreach (var file in genOptions.LocalVideoFiles.Take(5))
                                        {
                                            <li>@file.Name (@VideoGenerationService.FormatFileSize(file.Size))</li>
                                        }
                                        @if (genOptions.LocalVideoFiles.Count > 5)
                                        {
                                            <li>... 외 @(genOptions.LocalVideoFiles.Count - 5)개 더</li>
                                        }
                                    </ul>
                                </div>
                            }
                        </div>
                    }
                </div>
            </div>

            <!-- 2. 후처리 설정 -->
            <div class="card mb-4">
                <div class="card-header bg-success text-white">
                    <h4>2. 후처리 설정</h4>
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" @bind="postOptions.EnablePostProcessing" id="enablePostProcessing" disabled="@(isRunning || hasActiveSchedule)">
                            <label class="form-check-label" for="enablePostProcessing">
                                <strong>영상 후처리 사용</strong>
                            </label>
                        </div>
                    </div>

                    @if (postOptions.EnablePostProcessing)
                    {
                        <div class="card bg-light">
                            <div class="card-body">
                                <div class="row">
                                    <div class="col-md-6">
                                        <div class="mb-3">
                                            <div class="form-check">
                                                <input class="form-check-input" type="checkbox" @bind="postOptions.AddCaption" id="addCaption" disabled="@(isRunning || hasActiveSchedule)">
                                                <label class="form-check-label" for="addCaption">
                                                    <strong>캡션 추가</strong>
                                                </label>
                                            </div>
                                            @if (postOptions.AddCaption)
                                            {
                                                <div class="mt-2">
                                                    <div class="form-check mb-2">
                                                        <input class="form-check-input" type="checkbox" @bind="postOptions.UseRandomCaption" @bind:after="OnRandomCaptionChanged" id="useRandomCaptionAllinone" disabled="@(isRunning || hasActiveSchedule)">
                                                        <label class="form-check-label" for="useRandomCaptionAllinone">
                                                            <strong>랜덤 캡션 (CSV 파일)</strong>
                                                        </label>
                                                    </div>
                                            
                                                    @if (postOptions.UseRandomCaption)
                                                    {
                                                        <div class="mb-2">
                                                            <label class="form-label form-label-sm">캡션 CSV 파일:</label>
                                                            <InputFile OnChange="HandleCaptionCsvSelection" accept=".csv" class="form-control form-control-sm" disabled="@(isRunning || hasActiveSchedule)" />
                                                            <div class="form-text">CSV 형식: 첫 번째 열은 번호, 두 번째 열은 캡션 텍스트</div>
                                                            
                                                            @if (postOptions.CaptionCsvList.Count > 0)
                                                            {
                                                                <div class="mt-1 alert alert-success py-1 px-2 small">
                                                                    ✓ @postOptions.CaptionCsvList.Count 개 캡션 로드됨
                                                                    <button type="button" class="btn btn-sm btn-outline-primary ms-2" @onclick="ShowCaptionCsvPreview" disabled="@(isRunning || hasActiveSchedule)">
                                                                        미리보기
                                                                    </button>
                                                                </div>
                                                            }
                                                        </div>
                                                    }
                                                    else
                                                    {
                                                        <input type="text" class="form-control form-control-sm mb-2" @bind="postOptions.CaptionText" placeholder="캡션 텍스트" disabled="@(isRunning || hasActiveSchedule)" />
                                                    }
                                            
                                                    <div class="row mt-2">
                                                        <div class="col-4">
                                                            <select class="form-select form-select-sm" @bind="postOptions.CaptionPosition" disabled="@(isRunning || hasActiveSchedule)">
                                                                <option value="top">상단</option>
                                                                <option value="center">중앙</option>
                                                                <option value="bottom">하단</option>
                                                                <option value="random">랜덤</option>
                                                            </select>
                                                        </div>
                                                        <div class="col-4">
                                                            <select class="form-select form-select-sm" @bind="postOptions.CaptionSize" disabled="@(isRunning || hasActiveSchedule)">
                                                                <option value="60">작게</option>
                                                                <option value="80">보통</option>
                                                                <option value="120">크게</option>
                                                                <option value="random">랜덤</option>
                                                            </select>
                                                        </div>
                                                        <div class="col-4">
                                                            <select class="form-select form-select-sm" @bind="postOptions.CaptionColor" disabled="@(isRunning || hasActiveSchedule)">
                                                                <option value="white">흰색</option>
                                                                <option value="yellow">노란색</option>
                                                                <option value="red">빨간색</option>
                                                                <option value="black">검정색</option>
                                                                <option value="random">랜덤</option>
                                                            </select>
                                                        </div>
                                                    </div>
                                                </div>
                                            }
                                    
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="mb-3">
                                            <div class="form-check">
                                                <input class="form-check-input" type="checkbox" @bind="postOptions.AddBackgroundMusic" id="addBackgroundMusic" disabled="@(isRunning || hasActiveSchedule)">
                                                <label class="form-check-label" for="addBackgroundMusic">
                                                    <strong>배경음악 추가</strong>
                                                </label>
                                            </div>
                                            @if (postOptions.AddBackgroundMusic)
                                            {
                                                <div class="mt-2">
                                                    <div class="mb-2">
                                                        <label class="form-label form-label-sm">배경음악 파일들:</label>
                                                        <InputFile OnChange="HandleMusicFileSelection" accept="audio/*" multiple class="form-control form-control-sm" disabled="@(isRunning || hasActiveSchedule)" />
                                                        <div class="form-text">여러 개 선택 가능. 지원 형식: MP3, WAV, M4A, AAC (각 최대 10MB)</div>
                                                        
                                                        @if (postOptions.SelectedMusicFiles.Count > 0)
                                                        {
                                                            <div class="mt-1 alert alert-success py-1 px-2 small">
                                                                ✓ @postOptions.SelectedMusicFiles.Count 개 파일 선택됨
                                                                <ul class="mb-0 mt-1">
                                                                    @foreach (var file in postOptions.SelectedMusicFiles.Take(3))
                                                                    {
                                                                        <li>@file.Name (@VideoGenerationService.FormatFileSize(file.Size))</li>
                                                                    }
                                                                    @if (postOptions.SelectedMusicFiles.Count > 3)
                                                                    {
                                                                        <li>... 외 @(postOptions.SelectedMusicFiles.Count - 3)개 더</li>
                                                                    }
                                                                </ul>
                                                            </div>
                                                        }
                                                    </div>
                                                    <label class="form-label form-label-sm">음량: @postOptions.MusicVolume</label>
                                                    <input type="range" class="form-range" min="0.1" max="1.0" step="0.1" @bind="postOptions.MusicVolume" disabled="@(isRunning || hasActiveSchedule)" />
                                                </div>
                                            }
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>

            <!-- 3. YouTube 업로드 설정 -->
            <div class="card mb-4">
                <div class="card-header bg-danger text-white">
                    <h4>3. YouTube 업로드 설정</h4>
                </div>
                <div class="card-body">
                    <!-- YouTube 계정 상태 -->
                    <div class="mb-3">
                        @if (YouTubeService.CurrentAccount == null)
                        {
                            <div class="alert alert-warning">
                                <strong>YouTube 계정 연동 필요</strong>
                                <button type="button" class="btn btn-danger btn-sm ms-2" @onclick="AuthenticateYouTube" disabled="@(isAuthenticating || isRunning)">
                                    @if (isAuthenticating)
                                    {
                                        <span>인증 중...</span>
                                    }
                                    else
                                    {
                                        <span>계정 연동</span>
                                    }
                                </button>
                            </div>
                        }
                        else
                        {
                            <div class="alert alert-success">
                                <strong>연동된 계정:</strong> @YouTubeService.CurrentAccount.ChannelTitle
                                <small class="text-muted ms-2">구독자: @YouTubeUploadService.FormatSubscriberCount(YouTubeService.CurrentAccount.SubscriberCount)명</small>
                                <button type="button" class="btn btn-outline-secondary btn-sm ms-2" @onclick="SwitchYouTubeAccount" disabled="@(isRunning || hasActiveSchedule)">
                                    계정 전환
                                </button>
                            </div>
                        }
                    </div>
            
                    <!-- 랜덤 업로드 정보 사용 체크박스 -->
                    <div class="mb-4">
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" @bind="useRandomUploadInfo" @bind:after="OnRandomUploadInfoChanged" id="useRandomUploadInfo" disabled="@(isRunning || hasActiveSchedule)">
                            <label class="form-check-label" for="useRandomUploadInfo">
                                <strong>랜덤 업로드 정보 사용 (CSV 파일)</strong>
                            </label>
                        </div>
                        <div class="form-text">제목, 설명, 태그를 CSV 파일에서 랜덤으로 선택합니다.</div>
                    </div>
            
                    @if (useRandomUploadInfo)
                    {
                        <!-- CSV 파일 업로드 -->
                        <div class="mb-4">
                            <label class="form-label"><strong>업로드 정보 CSV 파일:</strong></label>
                            <InputFile OnChange="HandleUploadInfoCsvSelection" accept=".csv" class="form-control" disabled="@(isRunning || hasActiveSchedule)" />
                            <div class="form-text">
                                CSV 파일 형식: 1열(번호), 2열(제목), 3열(설명), 4열(태그)
                                <br />
                                예시: 1, "제목 예시", "설명 예시", "태그1, 태그2, 태그3"
                            </div>
            
                            @if (uploadInfoCsvList.Count > 0)
                            {
                                <div class="mt-2 alert alert-success">
                                    <strong>로드된 업로드 정보:</strong> @uploadInfoCsvList.Count 개
                                    <button type="button" class="btn btn-sm btn-outline-primary ms-2" @onclick="ShowUploadInfoCsvPreview" disabled="@(isRunning || hasActiveSchedule)">
                                        미리보기
                                    </button>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <!-- 수동 입력 모드 -->
                        <div class="mb-3">
                            <label class="form-label"><strong>제목 템플릿:</strong></label>
                            <input type="text" class="form-control" @bind="uploadOptions.TitleTemplate" placeholder="예: Runmoa #NUMBER" disabled="@(isRunning || hasActiveSchedule)" />
                            <div class="form-text">#NUMBER는 자동으로 #1, #2, #3... 으로 변환됩니다</div>
                        </div>
                        
                        <div class="mb-3">
                            <label class="form-label"><strong>설명:</strong></label>
                            <textarea class="form-control" rows="3" @bind="uploadOptions.Description" placeholder="영상 설명" disabled="@(isRunning || hasActiveSchedule)"></textarea>
                        </div>
                        
                        <div class="mb-3">
                            <label class="form-label"><strong>태그:</strong></label>
                            <input type="text" class="form-control" @bind="uploadOptions.Tags" placeholder="태그1, 태그2, 태그3" disabled="@(isRunning || hasActiveSchedule)" />
                        </div>
                    }
            
                    <!-- 공개 설정 (항상 표시) -->
                    <div class="mb-3">
                        <label class="form-label"><strong>공개 설정:</strong></label>
                        <select class="form-select" @bind="uploadOptions.PrivacySetting" disabled="@(isRunning || hasActiveSchedule)">
                            <option value="비공개">비공개</option>
                            <option value="공개">공개</option>
                            <option value="링크 공유">링크 공유</option>
                        </select>
                    </div>
                </div>
            </div>

            <!-- 4. 업로드 방식 설정 -->
            <div class="card mb-4">
                <div class="card-header bg-warning text-dark">
                    <h4>4. 업로드 방식 설정</h4>
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <div class="form-check">
                            <input class="form-check-input" type="radio" name="uploadMode" id="immediateUpload"
                                   @onchange="() => isScheduleUpload = false" checked="@(!isScheduleUpload)" disabled="@(isRunning || hasActiveSchedule)">
                            <label class="form-check-label" for="immediateUpload">
                                <strong>즉시 업로드</strong> - 영상 생성 완료 후 바로 순차 업로드
                            </label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input" type="radio" name="uploadMode" id="scheduleUpload"
                                   @onchange="() => isScheduleUpload = true" checked="@isScheduleUpload" disabled="@(isRunning || hasActiveSchedule)">
                            <label class="form-check-label" for="scheduleUpload">
                                <strong>스케줄 업로드</strong> - 지정된 시간에 랜덤하게 자동 업로드
                            </label>
                        </div>
                    </div>

                    @if (isScheduleUpload)
                    {
                        <div class="row">
                            <div class="col-md-4">
                                <label class="form-label">업로드 기간: @FormatScheduleHours(scheduleHours)</label>
                                <input type="range" class="form-range" min="0.5" max="480" step="0.5" 
                                       value="@scheduleHours" @oninput="OnScheduleHoursInput" disabled="@(isRunning || hasActiveSchedule)" />
                                <div class="form-text">@FormatScheduleHours(scheduleHours) 동안 업로드를 분산</div>
                                <small class="text-muted">0.5~24시간: 0.5시간 단위, 24~480시간: 12시간 단위</small>
                            </div>
                            <div class="col-md-4">
                                <label class="form-label">최소 간격: @FormatMinInterval(minIntervalMinutes)</label>
                                <input type="range" class="form-range" min="7" max="360" step="1" 
                                       value="@minIntervalMinutes" @oninput="OnMinIntervalInput" disabled="@(isRunning || hasActiveSchedule)" />
                                <div class="form-text">업로드 간 최소 @FormatMinInterval(minIntervalMinutes) 간격</div>
                                <small class="text-muted">7~180분: 1분 단위, 180~360분: 15분 단위</small>
                            </div>
                            <div class="col-md-4">
                                <div class="form-check mt-3">
                                    <input class="form-check-input" type="checkbox" @bind="randomizeOrder" @bind:after="UpdateSchedulePreview" id="randomizeOrder" disabled="@(isRunning || hasActiveSchedule)">
                                    <label class="form-check-label" for="randomizeOrder">
                                        업로드 순서 랜덤화
                                    </label>
                                </div>
                            </div>
                        </div>

                        @if (schedulePreviewList.Count > 0)
                        {
                            <div class="mt-3 alert alert-info">
                                <h6>예상 업로드 스케줄:</h6>
                                <ul class="mb-0">
                                @if (schedulePreviewList.Count <= 5)
                                {
                                    @foreach (var item in schedulePreviewList)
                                    {
                                        <li>영상 #@item.Index -> @item.ScheduledTime.ToString("MM/dd HH:mm")</li>
                                    }
                                }
                                else
                                {
                                    @* 처음 3개 *@
                                    @foreach (var item in schedulePreviewList.Take(3))
                                    {
                                        <li>영상 #@item.Index -> @item.ScheduledTime.ToString("MM/dd HH:mm")</li>
                                    }
                                    <li class="text-muted">... 중간 @(schedulePreviewList.Count - 4)개 생략 ...</li>
                                    @* 마지막 1개 *@
                                    <li>영상 #@schedulePreviewList.Last().Index -> @schedulePreviewList.Last().ScheduledTime.ToString("MM/dd HH:mm")</li>
                                }
                            </ul>
                                <button type="button" class="btn btn-sm btn-outline-primary mt-2" @onclick="UpdateSchedulePreview" disabled="@(isRunning || hasActiveSchedule)">
                                    스케줄 다시 계산
                                </button>
                            </div>
                        }
                    }
                </div>
            </div>

            <!-- 5. 실행 버튼 -->
            <div class="card mb-4">
                <div class="card-body text-center">
                    <button type="button" class="btn btn-success btn-lg px-5" @onclick="StartAllInOne"
                            disabled="@(!CanStart || isRunning)">
                        @if (isRunning)
                        {
                            <span>실행 중...</span>
                        }
                        else if (hasActiveSchedule)
                        {
                            <span>스케줄 업로드 진행 중...</span>
                        }
                        else
                        {
                            <span>🚀 All-in-One 시작</span>
                        }
                    </button>

                    @if (isRunning)
                    {
                        <button type="button" class="btn btn-outline-danger btn-lg px-3 ms-3" @onclick="StopAllInOne">
                            중지
                        </button>
                    }
                </div>
            </div>

            <!-- 진행률 표시 -->
            @if (isRunning)
            {
                <div class="card mb-4">
                    <div class="card-header">
                        <h5>진행 상황</h5>
                    </div>
                    <div class="card-body">
                        <div class="progress mb-3">
                            <div class="progress-bar progress-bar-striped progress-bar-animated"
                                 style="width: @(currentProgress)%"></div>
                        </div>
                        <div class="text-info">@statusMessage</div>
                        @if (!string.IsNullOrEmpty(currentPromptUsed))
                        {
                            <div class="text-muted small mt-1">현재 프롬프트: @currentPromptUsed</div>
                        }

                        @if (generatedVideos.Count > 0)
                        {
                            <div class="mt-3">
                                <h6>생성된 영상:</h6>
                                <ul class="list-group">
                                    @foreach (var video in generatedVideos)
                                    {
                                        <li class="list-group-item d-flex justify-content-between align-items-center">
                                            <span>@video.FileName</span>
                                            <span class="badge bg-@(video.IsScheduled ? "success" : "secondary")">
                                                @(video.IsScheduled ? "스케줄 등록됨" : "처리 중")
                                            </span>
                                        </li>
                                    }
                                </ul>
                            </div>
                        }
                    </div>
                </div>
            }

            <!-- 스케줄 진행률 표시 -->
            @if (hasActiveSchedule && !isRunning)
            {
                <div class="card mb-4">
                    <div class="card-header">
                        <h5>스케줄 업로드 진행 중</h5>
                    </div>
                    <div class="card-body">
                        <div class="progress mb-3">
                            <div class="progress-bar progress-bar-striped progress-bar-animated bg-info" style="width: 100%"></div>
                        </div>
                        <div class="text-info">@statusMessage</div>
                        <div class="text-muted small">웹 애플리케이션을 종료하지 마세요. 백그라운드에서 자동 업로드가 진행됩니다.</div>

                        @if (!string.IsNullOrEmpty(nextUploadInfo))
                        {
                            <div class="mt-2 alert alert-info">
                                <small><strong>다음 업로드:</strong> @nextUploadInfo</small>
                            </div>
                        }
                    </div>
                </div>
            }

            <!-- 완료 결과 -->
            @if (!string.IsNullOrEmpty(resultMessage))
            {
                <div class="alert @GetResultAlertClass()">
                    <h5>@GetResultTitle()</h5>
                    <p>@resultMessage</p>
                </div>
            }

        </div>
    </div>
</div>

<!-- CSV 미리보기 모달 -->
@if (showCsvPreview)
{
    <div class="modal show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">프롬프트 미리보기</h5>
                    <button type="button" class="btn-close" @onclick="() => showCsvPreview = false" disabled="@(isRunning || hasActiveSchedule)"></button>
                </div>
                <div class="modal-body">
                    <p><strong>총 @genOptions.CsvPrompts.Count 개의 프롬프트가 로드되었습니다.</strong></p>
                    <div style="max-height: 300px; overflow-y: auto;">
                        @for (int i = 0; i < Math.Min(10, genOptions.CsvPrompts.Count); i++)
                        {
                            <div class="mb-2">
                                <strong>@(i + 1).</strong> @genOptions.CsvPrompts[i]
                            </div>
                        }
                        @if (genOptions.CsvPrompts.Count > 10)
                        {
                            <div class="text-muted">... 외 @(genOptions.CsvPrompts.Count - 10) 개 더</div>
                        }
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="() => showCsvPreview = false" disabled="@(isRunning || hasActiveSchedule)">닫기</button>
                </div>
            </div>
        </div>
    </div>
}

<!-- 캡션 CSV 미리보기 모달 -->
@if (showCaptionCsvPreview)
{
    <div class="modal show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">캡션 미리보기</h5>
                    <button type="button" class="btn-close" @onclick="() => showCaptionCsvPreview = false" disabled="@(isRunning || hasActiveSchedule)"></button>
                </div>
                <div class="modal-body">
                    <p><strong>총 @postOptions.CaptionCsvList.Count 개의 캡션이 로드되었습니다.</strong></p>
                    <div style="max-height: 300px; overflow-y: auto;">
                        @for (int i = 0; i < Math.Min(10, postOptions.CaptionCsvList.Count); i++)
                        {
                            <div class="mb-2">
                                <strong>@(i + 1).</strong> @postOptions.CaptionCsvList[i]
                            </div>
                        }
                        @if (postOptions.CaptionCsvList.Count > 10)
                        {
                            <div class="text-muted">... 외 @(postOptions.CaptionCsvList.Count - 10) 개 더</div>
                        }
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="() => showCaptionCsvPreview = false" disabled="@(isRunning || hasActiveSchedule)">닫기</button>
                </div>
            </div>
        </div>
    </div>
}
<!-- 업로드 정보 CSV 미리보기 모달 -->
@if (showUploadInfoCsvPreview)
{
    <div class="modal show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">업로드 정보 미리보기</h5>
                    <button type="button" class="btn-close" @onclick="() => showUploadInfoCsvPreview = false" disabled="@(isRunning || hasActiveSchedule)"></button>
                </div>
                <div class="modal-body">
                    <p><strong>총 @uploadInfoCsvList.Count 개의 업로드 정보가 로드되었습니다.</strong></p>
                    <div style="max-height: 400px; overflow-y: auto;">
                        @for (int i = 0; i < Math.Min(5, uploadInfoCsvList.Count); i++)
                        {
                            <div class="card mb-2">
                                <div class="card-body">
                                    <h6 class="card-title">@(i + 1). @uploadInfoCsvList[i].Title</h6>
                                    <p class="card-text small mb-1"><strong>설명:</strong> @uploadInfoCsvList[i].Description</p>
                                    <p class="card-text small mb-0"><strong>태그:</strong> @uploadInfoCsvList[i].Tags</p>
                                </div>
                            </div>
                        }
                        @if (uploadInfoCsvList.Count > 5)
                        {
                            <div class="text-muted text-center">... 외 @(uploadInfoCsvList.Count - 5) 개 더</div>
                        }
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="() => showUploadInfoCsvPreview = false" disabled="@(isRunning || hasActiveSchedule)">닫기</button>
                </div>
            </div>
        </div>
    </div>
}


<!-- ----------------------code ------------------------ -->

@code {
    // 🔥 서비스의 Options 클래스 사용
    private VideoGenerationService.VideoGenerationOptions genOptions = new();
    private VideoGenerationService.PostProcessingOptions postOptions = new();
    private YouTubeUploadService.UploadOptions uploadOptions = new();

    private bool CanStart
    {
        get
        {
            // 활성 스케줄 체크
            if (hasActiveSchedule) return false;
            
            // YouTube 인증 체크
            if (!YouTubeService.IsAuthenticated) return false;
            
            // 🔥 제목 체크: 랜덤 업로드 정보 사용 시에는 체크 안 함
            if (!useRandomUploadInfo && string.IsNullOrWhiteSpace(uploadOptions.TitleTemplate))
                return false;
            
            // 🔥 랜덤 업로드 정보 사용 시 CSV 체크
            if (useRandomUploadInfo && uploadInfoCsvList.Count == 0)
                return false;
            
            // 영상 소스 체크
            if (genOptions.IsGenerateVideo && genOptions.CsvPrompts.Count == 0)
                return false;
            
            if (!genOptions.IsGenerateVideo && genOptions.LocalVideoFiles.Count == 0)
                return false;
            
            return true;
        }
    }

    // UI 상태
    private bool showCsvPreview = false;
    private bool showCaptionCsvPreview = false;

    // YouTube 인증
    private bool isAuthenticating = false;

    // 업로드 방식 설정
    private bool isScheduleUpload = true;
    private List<SchedulePreviewItem> schedulePreviewList = new List<SchedulePreviewItem>();
    private Dictionary<int, DateTime> savedScheduleTimes = new Dictionary<int, DateTime>(); // 🔥 추가

    public class SchedulePreviewItem
    {
        public int Index { get; set; }
        public DateTime ScheduledTime { get; set; }
    }

    // 스케줄 설정
    private float scheduleHours = 2.0f;
    private int minIntervalMinutes = 7;
    private bool randomizeOrder = true;

    // 랜덤 업로드 정보 관련
    private bool useRandomUploadInfo = false;
    private List<UploadInfoItem> uploadInfoCsvList = new List<UploadInfoItem>();
    private bool showUploadInfoCsvPreview = false;

    // 실행 상태
    private bool isRunning = false;
    private bool isCancelled = false;
    private int currentProgress = 0;
    private string statusMessage = "";
    private string currentPromptUsed = "";
    private string resultMessage = "";
    private bool isResultError = false;
    private List<GeneratedVideo> generatedVideos = new List<GeneratedVideo>();
    

    // 스케줄 상태 추적
    private bool hasActiveSchedule = false;
    private System.Timers.Timer? scheduleStatusTimer;
    private string nextUploadInfo = "";



    public class GeneratedVideo
    {
        public string FileName { get; set; } = "";
        public string FilePath { get; set; } = "";
        public bool IsScheduled { get; set; } = false;
    }

    private string totalCost => (genOptions.VideoCount * (genOptions.SelectedDuration == 5 ? 0.75m : 1.5m)).ToString("F2");

    private string GetDurationClass(int duration)
    {
        return genOptions.SelectedDuration == duration ? "btn-primary" : "btn-outline-primary";
    }

    private string GetAspectClass(string ratio)
    {
        return genOptions.SelectedAspectRatio == ratio ? "btn-success" : "btn-outline-success";
    }

    // 🔥 스냅 로직이 적용된 입력 핸들러들
    private void OnVideoCountInput(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int value))
        {
            // 10 이상이면 5 단위로 스냅
            if (value > 10)
            {
                value = (int)Math.Round(value / 5.0) * 5;
                value = Math.Max(10, Math.Min(70, value));
            }
            else
            {
                value = Math.Max(1, Math.Min(10, value));
            }
            
            genOptions.VideoCount = value;
            OnVideoCountChanged();
        }
    }
    
    private void OnScheduleHoursInput(ChangeEventArgs e)
    {
        if (float.TryParse(e.Value?.ToString(), out float value))
        {
            // 24 이상이면 12 단위로 스냅
            if (value >= 24)
            {
                value = (float)Math.Round(value / 12.0) * 12;
                value = Math.Max(24, Math.Min(480, value));
            }
            else
            {
                // 0.5 단위로 스냅
                value = (float)Math.Round(value * 2) / 2;
                value = Math.Max(0.5f, Math.Min(24, value));
            }
            
            scheduleHours = value;
            UpdateSchedulePreview();
        }
    }
    
    private void OnMinIntervalInput(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int value))
        {
            // 180 이상이면 15 단위로 스냅
            if (value >= 180)
            {
                value = (int)Math.Round(value / 15.0) * 15;
                value = Math.Max(180, Math.Min(360, value));
            }
            else
            {
                value = Math.Max(7, Math.Min(180, value));
            }
            
            minIntervalMinutes = value;
            UpdateSchedulePreview();
        }
    }
    
    // 🔥 포맷팅 메서드들
    private string FormatScheduleHours(float hours)
    {
        if (hours >= 24)
        {
            float days = hours / 24;
            return $"{days:F1} days";
        }
        return $"{hours:F1} 시간";
    }
    
    private string FormatMinInterval(int minutes)
    {
        if (minutes >= 180)
        {
            float hours = minutes / 60f;
            return $"{hours:F1} 시간";
        }
        return $"{minutes} 분";
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                var uri = new Uri(await JSRuntime.InvokeAsync<string>("eval", "window.location.href"));
                var query = System.Web.HttpUtility.ParseQueryString(uri.Query);
                
                if (query["auth"] == "success")
                {
                    try
                    {
                        bool authCheck = await YouTubeService.CheckExistingAuthAsync();
                        if (authCheck)
                        {
                            await JSRuntime.InvokeVoidAsync("alert", "YouTube 인증이 완료되었습니다!");
                            StateHasChanged();
                        }
                    }
                    catch (Exception ex)
                    {
                        await JSRuntime.InvokeVoidAsync("alert", $"인증 처리 오류: {ex.Message}");
                    }
                }
                else if (query["auth"] == "failed")
                {
                    await JSRuntime.InvokeVoidAsync("alert", "YouTube 인증에 실패했습니다.");
                }
                else if (query["auth"] == "error")
                {
                    string errorMsg = query["message"] ?? "알 수 없는 오류";
                    await JSRuntime.InvokeVoidAsync("alert", $"인증 오류: {errorMsg}");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"URL 파라미터 처리 오류: {ex.Message}");
            }
        }
    }

    private void OnVideoCountChanged()
    {
        if (isScheduleUpload)
        {
            UpdateSchedulePreview();
        }
        StateHasChanged();
    }

    private async Task HandleCsvFileSelection(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file == null) return;

        try
        {
            const long maxSize = 5 * 1024 * 1024;
            if (file.Size > maxSize)
            {
                await JSRuntime.InvokeVoidAsync("alert", "CSV 파일이 너무 큽니다. 5MB 이하의 파일을 선택해주세요.");
                return;
            }

            using var stream = file.OpenReadStream(maxSize);
            using var reader = new StreamReader(stream);
            var content = await reader.ReadToEndAsync();

            genOptions.CsvPrompts = VideoGenService.ParseCsvContent(content);

            if (genOptions.CsvPrompts.Count == 0)
            {
                await JSRuntime.InvokeVoidAsync("alert", "CSV 파일에서 유효한 프롬프트를 찾을 수 없습니다.");
            }
            else
            {
                OnVideoCountChanged();
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"CSV 파일 읽기 실패: {ex.Message}");
            genOptions.CsvPrompts.Clear();
        }
    }

    private async Task HandleLocalVideoSelection(InputFileChangeEventArgs e)
    {
        genOptions.LocalVideoFiles.Clear();
        genOptions.LocalVideoFiles.AddRange(e.GetMultipleFiles(20));

        const long maxSizePerFile = 2L * 1024 * 1024 * 1024;
        var invalidFiles = genOptions.LocalVideoFiles.Where(f => f.Size > maxSizePerFile).ToList();

        if (invalidFiles.Any())
        {
            await JSRuntime.InvokeVoidAsync("alert",
                $"다음 파일들이 2GB를 초과합니다:\n{string.Join("\n", invalidFiles.Select(f => f.Name))}");

            genOptions.LocalVideoFiles = genOptions.LocalVideoFiles.Where(f => f.Size <= maxSizePerFile).ToList();
        }

        if (!genOptions.IsGenerateVideo)
        {
            genOptions.VideoCount = genOptions.LocalVideoFiles.Count;
        }

        OnVideoCountChanged();
        StateHasChanged();
    }

    private async Task HandleMusicFileSelection(InputFileChangeEventArgs e)
    {
        postOptions.SelectedMusicFiles.Clear();
        
        var files = e.GetMultipleFiles(10);
        
        try
        {
            const long maxSize = 10 * 1024 * 1024;
            
            foreach (var file in files)
            {
                if (file.Size > maxSize)
                {
                    await JSRuntime.InvokeVoidAsync("alert", $"{file.Name}이 너무 큽니다. 10MB 이하만 가능합니다.");
                    continue;
                }
    
                string[] supportedTypes = { "audio/mpeg", "audio/mp3", "audio/wav", "audio/mp4", "audio/aac" };
                if (!supportedTypes.Contains(file.ContentType.ToLower()) && 
                    !file.Name.ToLower().EndsWith(".mp3") && 
                    !file.Name.ToLower().EndsWith(".wav") && 
                    !file.Name.ToLower().EndsWith(".m4a") && 
                    !file.Name.ToLower().EndsWith(".aac"))
                {
                    await JSRuntime.InvokeVoidAsync("alert", $"{file.Name}은 지원되지 않는 형식입니다.");
                    continue;
                }
                
                postOptions.SelectedMusicFiles.Add(file);
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"음악 파일 선택 오류: {ex.Message}");
            postOptions.SelectedMusicFiles.Clear();
        }
    
        StateHasChanged();
    }

    private void ShowCsvPreview()
    {
        showCsvPreview = true;
    }

    private void OnRandomCaptionChanged()
    {
        if (!postOptions.UseRandomCaption)
        {
            postOptions.CaptionCsvList.Clear();
        }
    }
    
    private async Task HandleCaptionCsvSelection(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file == null) return;
    
        try
        {
            const long maxSize = 5 * 1024 * 1024;
            if (file.Size > maxSize)
            {
                await JSRuntime.InvokeVoidAsync("alert", "CSV 파일이 너무 큽니다. 5MB 이하의 파일을 선택해주세요.");
                return;
            }
    
            using var stream = file.OpenReadStream(maxSize);
            using var reader = new StreamReader(stream);
            var content = await reader.ReadToEndAsync();
    
            postOptions.CaptionCsvList = VideoGenService.ParseCsvContent(content);
    
            if (postOptions.CaptionCsvList.Count == 0)
            {
                await JSRuntime.InvokeVoidAsync("alert", "CSV 파일에서 유효한 캡션을 찾을 수 없습니다.");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"CSV 파일 읽기 실패: {ex.Message}");
            postOptions.CaptionCsvList.Clear();
        }
    }
    
    private void ShowCaptionCsvPreview()
    {
        showCaptionCsvPreview = true;
    }

    private async Task AuthenticateYouTube()
    {
        isAuthenticating = true;
    
        try
        {
            string authUrl = await YouTubeService.GetAuthorizationUrlAsync(JSRuntime, "all-in-one");
            await JSRuntime.InvokeVoidAsync("eval", $"window.location.href = '{authUrl}'");
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"인증 오류: {ex.Message}");
        }
        finally
        {
            isAuthenticating = false;
        }
    }

    private async Task SwitchYouTubeAccount()
    {
        try
        {
            bool confirm = await JSRuntime.InvokeAsync<bool>("confirm", 
                "현재 계정 연동을 해제하고 다른 계정으로 전환하시겠습니까?");
            
            if (!confirm) return;
            
            await YouTubeService.SwitchAccountAsync();
            StateHasChanged();
            
            await AuthenticateYouTube();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"계정 전환 실패: {ex.Message}");
        }
    }

    public class UploadInfoItem
    {
        public string Title { get; set; } = "";
        public string Description { get; set; } = "";
        public string Tags { get; set; } = "";
    }
    
    private void OnRandomUploadInfoChanged()
    {
        if (!useRandomUploadInfo)
        {
            uploadInfoCsvList.Clear();
        }
    }
    
    private async Task HandleUploadInfoCsvSelection(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file == null) return;
    
        try
        {
            const long maxSize = 5 * 1024 * 1024;
            if (file.Size > maxSize)
            {
                await JSRuntime.InvokeVoidAsync("alert", "CSV 파일이 너무 큽니다. 5MB 이하의 파일을 선택해주세요.");
                return;
            }
    
            using var stream = file.OpenReadStream(maxSize);
            using var reader = new StreamReader(stream);
            var content = await reader.ReadToEndAsync();
    
            uploadInfoCsvList = ParseUploadInfoCsv(content);
    
            if (uploadInfoCsvList.Count == 0)
            {
                await JSRuntime.InvokeVoidAsync("alert", "CSV 파일에서 유효한 업로드 정보를 찾을 수 없습니다.");
            }
            else
            {
                Console.WriteLine($"=== {uploadInfoCsvList.Count}개 업로드 정보 로드됨");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"CSV 파일 읽기 실패: {ex.Message}");
            uploadInfoCsvList.Clear();
        }
    }
    
    private List<UploadInfoItem> ParseUploadInfoCsv(string content)
    {
        var items = new List<UploadInfoItem>();
        var lines = content.Split('\n', StringSplitOptions.RemoveEmptyEntries);
    
        // 🔥 첫 번째 줄이 헤더인지 확인
        int startIndex = 1; // 기본적으로 1번째 줄(인덱스 1)부터 시작
        
        if (lines.Length > 0)
        {
            var firstLine = lines[0].ToLower();
            // 헤더로 보이는 키워드가 있으면 건너뛰기
            if (firstLine.Contains("번호") || firstLine.Contains("number") || 
                firstLine.Contains("제목") || firstLine.Contains("title"))
            {
                startIndex = 1;
                Console.WriteLine("=== CSV 헤더 감지됨, 두 번째 줄부터 파싱 시작");
            }
            else
            {
                startIndex = 0; // 헤더가 없으면 첫 줄부터
                Console.WriteLine("=== CSV 헤더 없음, 첫 번째 줄부터 파싱 시작");
            }
        }
    
        for (int i = startIndex; i < lines.Length; i++)
        {
            var line = lines[i].Trim();
            if (string.IsNullOrEmpty(line)) continue;
    
            try
            {
                // 🔥 태그 "#"을 기준으로 먼저 분리
                int tagStartIndex = line.IndexOf('#');
                
                if (tagStartIndex == -1)
                {
                    Console.WriteLine($"CSV 라인 {i}: 태그(#)를 찾을 수 없음 - 건너뜀");
                    continue;
                }
    
                // 태그 추출 (# 이후 전체)
                string tags = line.Substring(tagStartIndex).Trim();
                
                // 태그 앞 부분
                string beforeTags = line.Substring(0, tagStartIndex).TrimEnd(',', ' ');
                
                // 첫 번째 쉼표 찾기 (번호 다음)
                int firstComma = beforeTags.IndexOf(',');
                if (firstComma == -1)
                {
                    Console.WriteLine($"CSV 라인 {i}: 번호 구분 쉼표 없음");
                    continue;
                }
                
                // 번호 이후 부분
                string afterNumber = beforeTags.Substring(firstComma + 1).Trim();
                
                // 제목 시작 따옴표 찾기
                int titleStart = afterNumber.IndexOf('"');
                if (titleStart == -1)
                {
                    Console.WriteLine($"CSV 라인 {i}: 제목 시작 따옴표 없음");
                    continue;
                }
                
                // 제목 끝 따옴표 찾기 (이스케이프된 따옴표 고려)
                int titleEnd = titleStart + 1;
                while (titleEnd < afterNumber.Length)
                {
                    if (afterNumber[titleEnd] == '"')
                    {
                        // 다음 문자가 따옴표면 이스케이프
                        if (titleEnd + 1 < afterNumber.Length && afterNumber[titleEnd + 1] == '"')
                        {
                            titleEnd += 2; // 이스케이프된 따옴표 건너뛰기
                            continue;
                        }
                        break; // 진짜 끝 따옴표
                    }
                    titleEnd++;
                }
                
                if (titleEnd >= afterNumber.Length)
                {
                    Console.WriteLine($"CSV 라인 {i}: 제목 끝 따옴표 없음");
                    continue;
                }
                
                string title = afterNumber.Substring(titleStart + 1, titleEnd - titleStart - 1)
                    .Replace("\"\"", "\"") // 이스케이프된 따옴표 복원
                    .Trim();
                
                // 설명 찾기
                string afterTitle = afterNumber.Substring(titleEnd + 1).Trim();
                if (afterTitle.StartsWith(","))
                {
                    afterTitle = afterTitle.Substring(1).Trim();
                }
                
                int descStart = afterTitle.IndexOf('"');
                if (descStart == -1)
                {
                    Console.WriteLine($"CSV 라인 {i}: 설명 시작 따옴표 없음");
                    continue;
                }
                
                // 설명 끝 따옴표 찾기
                int descEnd = descStart + 1;
                while (descEnd < afterTitle.Length)
                {
                    if (afterTitle[descEnd] == '"')
                    {
                        if (descEnd + 1 < afterTitle.Length && afterTitle[descEnd + 1] == '"')
                        {
                            descEnd += 2;
                            continue;
                        }
                        break;
                    }
                    descEnd++;
                }
                
                if (descEnd >= afterTitle.Length)
                {
                    Console.WriteLine($"CSV 라인 {i}: 설명 끝 따옴표 없음");
                    continue;
                }
                
                string description = afterTitle.Substring(descStart + 1, descEnd - descStart - 1)
                    .Replace("\"\"", "\"")
                    .Trim();
    
                if (!string.IsNullOrWhiteSpace(title))
                {
                    items.Add(new UploadInfoItem
                    {
                        Title = title,
                        Description = description,
                        Tags = tags
                    });
                    
                    Console.WriteLine($"✅ CSV 라인 {i} 파싱 성공:");
                    Console.WriteLine($"   제목: {title}");
                    Console.WriteLine($"   설명: {(description.Length > 50 ? description.Substring(0, 50) + "..." : description)}");
                    Console.WriteLine($"   태그: {tags}");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"❌ CSV 라인 {i} 파싱 오류: {ex.Message}");
            }
        }
    
        Console.WriteLine($"=== 총 {items.Count}개 업로드 정보 파싱 완료");
        return items;
    }
    
    // 🔥 새로운 CSV 파싱 헬퍼 메서드 (따옴표 처리)
    private List<string> ParseCsvLine(string line)
    {
        var result = new List<string>();
        var current = new System.Text.StringBuilder();
        bool inQuotes = false;
    
        for (int i = 0; i < line.Length; i++)
        {
            char c = line[i];
    
            if (c == '"')
            {
                inQuotes = !inQuotes;
            }
            else if (c == ',' && !inQuotes)
            {
                result.Add(current.ToString());
                current.Clear();
            }
            else
            {
                current.Append(c);
            }
        }
    
        result.Add(current.ToString());
        return result;
    }
    
    private void ShowUploadInfoCsvPreview()
    {
        showUploadInfoCsvPreview = true;
    }

    private void UpdateSchedulePreview()
    {
        if (!isScheduleUpload) return;
    
        schedulePreviewList.Clear();
        savedScheduleTimes.Clear();
        
        DateTime startTime = DateTime.Now.AddMinutes(5);
        DateTime endTime = startTime.AddHours(scheduleHours);
    
        int totalVideos = genOptions.IsGenerateVideo ? genOptions.VideoCount : genOptions.LocalVideoFiles.Count;
    
        var random = new Random();
        
        for (int i = 0; i < totalVideos; i++)
        {
            double totalMinutes = (endTime - startTime).TotalMinutes;
            double segmentMinutes = totalMinutes / totalVideos; // ✅ 수정
    
            double segmentStart = i * segmentMinutes;
            double segmentEnd = Math.Min((i + 1) * segmentMinutes, totalMinutes);
    
            double randomMinutes = segmentStart + (random.NextDouble() * (segmentEnd - segmentStart));
    
            if (i > 0 && totalMinutes > (totalVideos * minIntervalMinutes))
            {
                var previousTime = startTime.AddMinutes(segmentStart);
                var proposedTime = startTime.AddMinutes(randomMinutes);
    
                if ((proposedTime - previousTime).TotalMinutes < minIntervalMinutes)
                {
                    randomMinutes = segmentStart + minIntervalMinutes;
                }
            }
    
            randomMinutes = Math.Min(randomMinutes, totalMinutes);
            DateTime scheduledTime = startTime.AddMinutes(randomMinutes);
            
            schedulePreviewList.Add(new SchedulePreviewItem
            {
                Index = i + 1,
                ScheduledTime = scheduledTime
            });
            
            savedScheduleTimes[i] = scheduledTime;
        }
    
        schedulePreviewList = schedulePreviewList.OrderBy(x => x.ScheduledTime).ToList();
        StateHasChanged();
    }
    
    // 🔥 YouTubeUploadService와 동일한 시간 계산 로직
    private DateTime CalculateScheduleTime(DateTime startTime, DateTime endTime, int index, int totalCount, int minIntervalMinutes)
    {
        var random = new Random(); // 같은 인덱스면 같은 시간 생성
        double totalMinutes = (endTime - startTime).TotalMinutes;
        double segmentMinutes = totalMinutes / totalCount;
    
        double segmentStart = index * segmentMinutes;
        double segmentEnd = Math.Min((index + 1) * segmentMinutes, totalMinutes);
    
        double randomMinutes = segmentStart + (random.NextDouble() * (segmentEnd - segmentStart));
    
        if (index > 0 && totalMinutes > (totalCount * minIntervalMinutes))
        {
            var previousTime = startTime.AddMinutes(segmentStart);
            var proposedTime = startTime.AddMinutes(randomMinutes);
    
            if ((proposedTime - previousTime).TotalMinutes < minIntervalMinutes)
            {
                randomMinutes = segmentStart + minIntervalMinutes;
            }
        }
    
        randomMinutes = Math.Min(randomMinutes, totalMinutes);
        return startTime.AddMinutes(randomMinutes);
    }
    
    private async Task StartAllInOne()
    {
        if (!CanStart) return;
    
        // 🔥 API 키 검증 개선
        if (genOptions.IsGenerateVideo)
        {
            var config = ConfigManager.GetConfig();
            if (string.IsNullOrEmpty(config.ReplicateApiKey))
            {
                bool useLocal = await JSRuntime.InvokeAsync<bool>("confirm",
                    "⚠️ Replicate API 키가 설정되지 않았습니다.\n\n" +
                    "AI 영상 생성을 하려면 API 키가 필요합니다.\n\n" +
                    "옵션을 선택해주세요:\n\n" +
                    "• [확인] → 로컬 파일 사용 모드로 전환\n" +
                    "• [취소] → 기본 설정 페이지로 이동\n\n" +
                    "로컬 파일 모드로 전환하시겠습니까?");
                
                if (useLocal)
                {
                    // 로컬 파일 모드로 전환
                    genOptions.IsGenerateVideo = false;
                    StateHasChanged();
                    await JSRuntime.InvokeVoidAsync("alert", 
                        "📁 로컬 파일 모드로 전환되었습니다.\n\n" +
                        "이제 처리할 영상 파일을 선택해주세요.");
                    return;
                }
                else
                {
                    // 설정 페이지로 이동
                    await JSRuntime.InvokeVoidAsync("eval", "window.location.href = '/settings'");
                    return;
                }
            }
    
            if (genOptions.CsvPrompts.Count == 0)
            {
                await JSRuntime.InvokeVoidAsync("alert", 
                    "📄 CSV 파일을 먼저 업로드해주세요!\n\n" +
                    "AI 영상을 생성하려면 프롬프트가 담긴 CSV 파일이 필요합니다.");
                return;
            }
        }
        else
        {
            if (genOptions.LocalVideoFiles.Count == 0)
            {
                await JSRuntime.InvokeVoidAsync("alert", 
                    "📁 처리할 영상 파일을 선택해주세요!\n\n" +
                    "로컬 파일 사용 모드에서는 직접 영상 파일을 업로드해야 합니다.");
                return;
            }
        }
    
        // YouTube 인증 확인 개선
        if (!YouTubeService.IsAuthenticated)
        {
            bool goToSettings = await JSRuntime.InvokeAsync<bool>("confirm",
                "⚠️ YouTube 계정이 연동되지 않았습니다.\n\n" +
                "업로드를 하려면 YouTube 계정 연동이 필요합니다.\n\n" +
                "• [확인] → 지금 계정 연동하기\n" +
                "• [취소] → 취소\n\n" +
                "계정을 연동하시겠습니까?");
            
            if (goToSettings)
            {
                await AuthenticateYouTube();
            }
            return;
        }
    
        if (postOptions.EnablePostProcessing)
        {
            if (postOptions.AddCaption && postOptions.UseRandomCaption && postOptions.CaptionCsvList.Count == 0)
            {
                await JSRuntime.InvokeVoidAsync("alert", "랜덤 캡션을 사용하려면 캡션 CSV 파일을 업로드해주세요.");
                return;
            }
            
            if (postOptions.AddCaption && !postOptions.UseRandomCaption && string.IsNullOrWhiteSpace(postOptions.CaptionText))
            {
                await JSRuntime.InvokeVoidAsync("alert", "캡션 텍스트를 입력해주세요.");
                return;
            }
        
            bool ffmpegAvailable = await VideoPostProcessor.IsFFmpegAvailableAsync();
            if (!ffmpegAvailable)
            {
                bool proceed = await JSRuntime.InvokeAsync<bool>("confirm",
                    "FFmpeg를 찾을 수 없어 후처리를 할 수 없습니다.\n후처리 없이 진행하시겠습니까?");
    
                if (!proceed)
                {
                    return;
                }
                postOptions.EnablePostProcessing = false;
            }
        }
    
        isRunning = true;
        isCancelled = false;
        currentProgress = 0;
        generatedVideos.Clear();
        resultMessage = "";
        isResultError = false;
    
        try
        {
            int totalVideos = genOptions.IsGenerateVideo ? genOptions.VideoCount : genOptions.LocalVideoFiles.Count;
            
            // 🔥 AI 생성 모드 + 스케줄 업로드
            if (genOptions.IsGenerateVideo && isScheduleUpload)
            {
                statusMessage = "스케줄 준비 중...";
                currentProgress = 50;
                StateHasChanged();
    
                // ✅ 영상을 미리 생성하지 않고, 생성 정보만 스케줄에 등록
                await RegisterToSchedule();
    
                currentProgress = 100;
                statusMessage = "All-in-One 완료!";
                resultMessage = $"{totalVideos}개 영상이 스케줄에 등록되었습니다. (업로드 5분 전 자동 생성)";
                hasActiveSchedule = true;
                StartScheduleStatusTracking();
            }
            // 🔥 AI 생성 모드 + 즉시 업로드
            else if (genOptions.IsGenerateVideo && !isScheduleUpload)
            {
                statusMessage = "영상 생성을 시작합니다...";
                StateHasChanged();
    
                // 즉시 업로드는 미리 생성해야 함
                for (int i = 0; i < totalVideos; i++)
                {
                    if (isCancelled) break;
    
                    currentProgress = (i * 80 / totalVideos);
                    statusMessage = $"영상 {i + 1}/{totalVideos} 생성 중...";
                    StateHasChanged();
    
                    var result = await VideoGenService.GenerateOrProcessVideoAsync(
                        i + 1,
                        genOptions,
                        postOptions,
                        (status) => {
                            statusMessage = status;
                            currentPromptUsed = status;
                            StateHasChanged();
                        }
                    );
    
                    if (result.Success)
                    {
                        var generatedVideo = new GeneratedVideo
                        {
                            FileName = result.FileName,
                            FilePath = result.VideoPath,
                            IsScheduled = false
                        };
                        generatedVideos.Add(generatedVideo);
                        
                        var historyItem = VideoGenService.CreateHistoryItem(result, genOptions, "All-in-One");
                        VideoHistoryManager.AddHistoryItem(historyItem);
                    }
    
                    StateHasChanged();
                }
    
                if (!isCancelled && generatedVideos.Count > 0)
                {
                    currentProgress = 85;
                    statusMessage = "즉시 업로드 시작...";
                    StateHasChanged();
    
                    await RegisterToSchedule();
    
                    currentProgress = 100;
                    statusMessage = "All-in-One 완료!";
                    resultMessage = $"{generatedVideos.Count}개 영상이 생성되고 즉시 업로드되었습니다.";
                }
            }
            // 🔥 로컬 파일 모드
            else
            {
                statusMessage = "로컬 파일 처리를 시작합니다...";
                StateHasChanged();
    
                for (int i = 0; i < totalVideos; i++)
                {
                    if (isCancelled) break;
    
                    currentProgress = (i * 80 / totalVideos);
                    statusMessage = $"파일 {i + 1}/{totalVideos} 처리 중...";
                    StateHasChanged();
    
                    var result = await VideoGenService.GenerateOrProcessVideoAsync(
                        i + 1,
                        genOptions,
                        postOptions,
                        (status) => {
                            statusMessage = status;
                            StateHasChanged();
                        }
                    );
    
                    if (result.Success)
                    {
                        var generatedVideo = new GeneratedVideo
                        {
                            FileName = result.FileName,
                            FilePath = result.VideoPath,
                            IsScheduled = false
                        };
                        generatedVideos.Add(generatedVideo);
                        
                        var historyItem = VideoGenService.CreateHistoryItem(result, genOptions, "All-in-One");
                        VideoHistoryManager.AddHistoryItem(historyItem);
                    }
    
                    StateHasChanged();
                }
    
                if (!isCancelled && generatedVideos.Count > 0)
                {
                    currentProgress = 85;
                    statusMessage = isScheduleUpload ? "YouTube 스케줄에 등록 중..." : "즉시 업로드 시작...";
                    StateHasChanged();
    
                    await RegisterToSchedule();
    
                    currentProgress = 100;
                    statusMessage = "All-in-One 완료!";
    
                    if (isScheduleUpload)
                    {
                        resultMessage = $"{generatedVideos.Count}개 영상이 처리되고 YouTube 스케줄에 등록되었습니다.";
                        hasActiveSchedule = true;
                        StartScheduleStatusTracking();
                    }
                    else
                    {
                        resultMessage = $"{generatedVideos.Count}개 영상이 처리되고 즉시 업로드되었습니다.";
                    }
                }
            }
    
            if (isCancelled)
            {
                statusMessage = "작업이 취소되었습니다.";
                resultMessage = "사용자에 의해 취소되었습니다.";
            }
            else if (!genOptions.IsGenerateVideo && generatedVideos.Count == 0)
            {
                statusMessage = "처리된 영상이 없습니다.";
                resultMessage = "처리할 수 있는 영상이 없었습니다.";
                isResultError = true;
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"All-in-One 실행 오류: {ex.Message}");
            statusMessage = $"오류 발생: {ex.Message}";
            resultMessage = $"오류로 인해 중단되었습니다: {ex.Message}";
            isResultError = true;
        }
        finally
        {
            isRunning = false;
            StateHasChanged();
        }
    }

    private string GetResultAlertClass()
    {
        return isResultError ? "alert-danger" : "alert-success";
    }

    private string GetResultTitle()
    {
        return isResultError ? "오류 발생" : "All-in-One 완료!";
    }

    private void StopAllInOne()
    {
        isCancelled = true;
        statusMessage = "중지 중...";
    }

    private async Task RegisterToSchedule()
    {
        if (isScheduleUpload)
        {
            DateTime startTime = DateTime.Now.AddMinutes(5);
            
            // 🔥 AI 생성 모드: 생성 정보만 전달
            if (genOptions.IsGenerateVideo)
            {
                var videoInfoList = new List<YouTubeUploadService.VideoGenerationInfo>();
                var random = new Random();
                
                for (int i = 0; i < genOptions.VideoCount; i++)
                {
                    string prompt = genOptions.CsvPrompts[random.Next(genOptions.CsvPrompts.Count)];
                    string? captionText = null;
                    
                    if (postOptions.EnablePostProcessing && postOptions.AddCaption)
                    {
                        if (postOptions.UseRandomCaption && postOptions.CaptionCsvList.Count > 0)
                        {
                            captionText = postOptions.CaptionCsvList[random.Next(postOptions.CaptionCsvList.Count)];
                        }
                        else
                        {
                            captionText = postOptions.CaptionText;
                        }
                    }
                    
                    string? musicPath = null;
                    if (postOptions.EnablePostProcessing && postOptions.AddBackgroundMusic && postOptions.SelectedMusicFiles.Count > 0)
                    {
                        var musicFile = postOptions.SelectedMusicFiles[random.Next(postOptions.SelectedMusicFiles.Count)];
                        string tempDir = Path.Combine(Path.GetTempPath(), "BackgroundMusic");
                        Directory.CreateDirectory(tempDir);
                        musicPath = Path.Combine(tempDir, musicFile.Name);
                        
                        using (var stream = musicFile.OpenReadStream(10 * 1024 * 1024))
                        using (var fileStream = File.Create(musicPath))
                        {
                            await stream.CopyToAsync(fileStream);
                        }
                    }
                    
                    videoInfoList.Add(new YouTubeUploadService.VideoGenerationInfo
                    {
                        Prompt = prompt,
                        Duration = genOptions.SelectedDuration,
                        AspectRatio = genOptions.SelectedAspectRatio,
                        EnablePostProcessing = postOptions.EnablePostProcessing,
                        CaptionText = captionText,
                        CaptionPosition = postOptions.CaptionPosition,
                        CaptionSize = postOptions.CaptionSize,
                        CaptionColor = postOptions.CaptionColor,
                        AddBackgroundMusic = postOptions.AddBackgroundMusic,
                        MusicFilePath = musicPath,
                        MusicVolume = postOptions.MusicVolume
                    });
                }
                
                if (useRandomUploadInfo && uploadInfoCsvList.Count > 0)
                {
                    uploadOptions.UseRandomInfo = true;
                    uploadOptions.RandomTitles = uploadInfoCsvList.Select(item => item.Title).ToList();
                    uploadOptions.RandomDescriptions = uploadInfoCsvList.Select(item => item.Description).ToList();
                    uploadOptions.RandomTags = uploadInfoCsvList.Select(item => item.Tags).ToList();
                }
                
                // 🔥 미리보기에서 저장된 시간 사용
                YouTubeService.RegisterScheduledUploadsWithGeneration(
                    videoInfoList,
                    uploadOptions,
                    savedScheduleTimes, // 🔥 저장된 시간 전달
                    randomizeOrder,
                    ScheduledUploadService
                );
                
                Console.WriteLine($"=== ✅ {videoInfoList.Count}개 영상 생성 정보 등록 완료");
                Console.WriteLine($"=== ⏰ 각 영상은 업로드 5분 전에 자동 생성됩니다");
            }
            // 🔥 로컬 파일 모드: 기존 방식 유지
            else
            {
                var filePaths = generatedVideos.Select(v => v.FilePath).ToList();
                
                if (useRandomUploadInfo && uploadInfoCsvList.Count > 0)
                {
                    uploadOptions.UseRandomInfo = true;
                    uploadOptions.RandomTitles = uploadInfoCsvList.Select(item => item.Title).ToList();
                    uploadOptions.RandomDescriptions = uploadInfoCsvList.Select(item => item.Description).ToList();
                    uploadOptions.RandomTags = uploadInfoCsvList.Select(item => item.Tags).ToList();
                }
                
                YouTubeService.RegisterScheduledUploads(
                    filePaths,
                    uploadOptions,
                    savedScheduleTimes, // 🔥 저장된 시간 전달
                    randomizeOrder,
                    ScheduledUploadService
                );
            }
            
            hasActiveSchedule = true;
            StartScheduleStatusTracking();
        }
        else
        {
            await StartImmediateUpload();
        }
    }
    
    private async Task StartImmediateUpload()
    {
        statusMessage = "즉시 업로드 시작...";
    
        try
        {
            var filePaths = generatedVideos.Select(v => v.FilePath).ToList();
            
            // 🔥 랜덤 업로드 정보 설정
            if (useRandomUploadInfo && uploadInfoCsvList.Count > 0)
            {
                uploadOptions.UseRandomInfo = true;
                
                // 각각 독립적인 리스트로 변환
                uploadOptions.RandomTitles = uploadInfoCsvList.Select(item => item.Title).ToList();
                uploadOptions.RandomDescriptions = uploadInfoCsvList.Select(item => item.Description).ToList();
                uploadOptions.RandomTags = uploadInfoCsvList.Select(item => item.Tags).ToList();
                
                Console.WriteLine($"=== 랜덤 업로드 정보 활성화");
                Console.WriteLine($"    제목: {uploadOptions.RandomTitles.Count}개");
                Console.WriteLine($"    설명: {uploadOptions.RandomDescriptions.Count}개");
                Console.WriteLine($"    태그: {uploadOptions.RandomTags.Count}개");
            }
            else
            {
                uploadOptions.UseRandomInfo = false;
                uploadOptions.RandomTitles = null;
                uploadOptions.RandomDescriptions = null;
                uploadOptions.RandomTags = null;
            }
            
            // 🔥 서비스 사용
            await YouTubeService.UploadMultipleVideosAsync(
                filePaths,
                uploadOptions,
                (current, total, title) => {
                    InvokeAsync(() => {
                        statusMessage = $"업로드 중... ({current}/{total}) {title}";
                        currentProgress = 85 + (current * 15 / total);
                        StateHasChanged();
                    });
                }
            );
    
            foreach (var video in generatedVideos)
            {
                video.IsScheduled = true;
            }
    
            statusMessage = $"즉시 업로드 완료!";
        }
        catch (Exception ex)
        {
            Console.WriteLine($"즉시 업로드 실패: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", $"업로드 실패: {ex.Message}");
        }
    }

    private void StartScheduleStatusTracking()
    {
        scheduleStatusTimer = new System.Timers.Timer(30000);
        scheduleStatusTimer.Elapsed += CheckScheduleStatus;
        scheduleStatusTimer.AutoReset = true;
        scheduleStatusTimer.Start();
    }

    private void CheckScheduleStatus(object sender, System.Timers.ElapsedEventArgs e)
    {
        try
        {
            int queueCount = ScheduledUploadService.GetQueueCount();
            var allItems = ScheduledUploadService.GetAllScheduledItems();
    
            InvokeAsync(() =>
            {
                if (queueCount == 0 && hasActiveSchedule)
                {
                    hasActiveSchedule = false;
                    scheduleStatusTimer?.Stop();
                    scheduleStatusTimer?.Dispose();
                    scheduleStatusTimer = null;
    
                    statusMessage = "스케줄 업로드 대기 중...";  // ✅ 수정
                    // resultMessage는 여기서 설정하지 않음 - HandleAllUploadsCompleted에서 처리
                    nextUploadInfo = "";
                }
                else if (hasActiveSchedule)
                {
                    statusMessage = $"스케줄 업로드 진행 중... (대기: {queueCount}개)";
    
                    var nextUpload = allItems
                        .Where(x => x.Status == "대기 중" || x.Status == "생성 완료")  // ✅ "생성 완료"도 포함
                        .OrderBy(x => x.ScheduledTime)
                        .FirstOrDefault();
    
                    if (nextUpload != null)
                    {
                        var timeUntil = nextUpload.ScheduledTime - DateTime.Now;
                        if (timeUntil.TotalMinutes > 0)
                        {
                            string fileName = nextUpload.FileName.Length > 30 
                                ? nextUpload.FileName.Substring(0, 27) + "..."
                                : nextUpload.FileName;
    
                            if (timeUntil.TotalHours >= 1)
                            {
                                nextUploadInfo = $"{fileName} - {nextUpload.ScheduledTime:MM/dd HH:mm} ({timeUntil.Hours}시간 {timeUntil.Minutes}분 후)";
                            }
                            else
                            {
                                nextUploadInfo = $"{fileName} - {nextUpload.ScheduledTime:MM/dd HH:mm} ({(int)timeUntil.TotalMinutes}분 후)";
                            }
                        }
                        else
                        {
                            nextUploadInfo = $"{nextUpload.FileName} - 곧 업로드 예정";
                        }
                    }
                    else
                    {
                        nextUploadInfo = "";
                    }
                }
    
                StateHasChanged();
            });
        }
        catch (Exception ex)
        {
            Console.WriteLine($"스케줄 상태 확인 오류: {ex.Message}");
        }
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        
        // 스케줄 업로드 완료 이벤트 구독
        ScheduledUploadService.OnAllUploadsCompleted += HandleAllUploadsCompleted;
    }

    // 새로운 메서드 추가
    private async void HandleAllUploadsCompleted(int successCount, int totalCount, List<ScheduledUploadItem> completedItems)
    {
           await InvokeAsync(async () =>
           {
               Console.WriteLine($"[All-in-One] 전체 업로드 완료 이벤트 수신 - {successCount}/{totalCount} 성공");
               
               string message = $"All-in-one 완료!\n\n" +
                              $"✅ 성공: {successCount}개\n" +
                              $"❌ 실패: {totalCount - successCount}개\n" +
                              $"📊 전체: {totalCount}개\n\n";
               
               // 성공한 항목들의 URL 표시 (최대 3개)
               var successfulItems = completedItems.Where(x => x.Status == "완료" && !string.IsNullOrEmpty(x.UploadedUrl)).Take(3).ToList();
               if (successfulItems.Any())
               {
                   message += "업로드된 영상:\n";
                   foreach (var item in successfulItems)
                   {
                       message += $"• {item.Title}\n";
                   }
               }
               
               await JSRuntime.InvokeVoidAsync("alert", message);
               
               StateHasChanged();
           });
       }

    public void Dispose()
    {
        // 이벤트 구독 해제
        ScheduledUploadService.OnAllUploadsCompleted -= HandleAllUploadsCompleted;
        
        // 기존 Dispose 로직...
        scheduleInfoTimer?.Stop();
        scheduleInfoTimer?.Dispose();
    }
}
