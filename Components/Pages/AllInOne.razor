@page "/all-in-one"
@rendermode InteractiveServer
@implements IDisposable
@using YouTubeShortsWebApp
@using YouTubeShortsWebApp.Services
@using System.Text
@inject IJSRuntime JSRuntime
@inject ScheduledUploadService ScheduledUploadService
@inject VideoGenerationService VideoGenService
@inject VideoPostProcessingService ProcessingService
@inject UploadScheduleService SchedulerService
@inject YouTubeUploadService YouTubeService
@using System.Web

<PageTitle>All-in-One 자동화</PageTitle>

<h1>All-in-One 자동 영상 생성 & 업로드</h1>
<p class="text-muted">영상 생성부터 YouTube 스케줄 업로드까지 한 번에 설정하고 실행하세요.</p>

<!-- 
    📝 작업 지침:
    
    1. 기존 AllInOne.razor 파일을 엽니다
    2. 160줄부터 1988줄까지의 UI 코드를 복사합니다
       (1. 영상 생성 설정 카드부터 실행 버튼, 진행률 표시, 결과 표시까지 모든 UI)
    3. 아래 주석 부분을 삭제하고 복사한 UI를 붙여넣습니다
    4. 코드 블록은 이미 완성되어 있으므로 수정하지 마세요
    
    ⚠️ 중요: inject 부분은 이미 위에 올바르게 설정되어 있습니다!
-->

<div class="container">
    <div class="row">
        <div class="col-md-10">

            <!-- 1. 영상 생성 설정 -->
            <div class="card mb-4">
                <div class="card-header bg-primary text-white">
                    <h4>1. 영상 생성 설정</h4>
                </div>
                <div class="card-body">
                    @if (genOptions.IsGenerateVideo && string.IsNullOrEmpty(ConfigManager.GetConfig().ReplicateApiKey))
                    {
                        <div class="alert alert-warning alert-dismissible fade show" role="alert">
                            <strong>⚠️ API 키가 설정되지 않았습니다</strong>
                            <p class="mb-2 mt-2">AI 영상 생성을 사용하려면 Replicate API 키가 필요합니다.</p>
                            <div class="d-flex gap-2">
                                <a href="/settings" class="btn btn-sm btn-warning">⚙️ 설정하러 가기</a>
                                <button type="button" class="btn btn-sm btn-outline-secondary" @onclick="() => genOptions.IsGenerateVideo = false">
                                    📁 로컬 파일 모드로 전환
                                </button>
                            </div>
                            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                        </div>
                    }
                    <!-- 영상 소스 선택 -->
                    <div class="mb-4">
                        <label class="form-label"><strong>영상 소스:</strong></label>
                        <div class="form-check">
                            <input class="form-check-input" type="radio" name="videoSource" id="generateVideo"
                                   @onchange="() => genOptions.IsGenerateVideo = true" checked="@genOptions.IsGenerateVideo" disabled="@(isRunning || hasActiveSchedule)">
                            <label class="form-check-label" for="generateVideo">
                                <strong>새로 생성</strong> - AI로 영상을 생성합니다
                            </label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input" type="radio" name="videoSource" id="useLocalVideo"
                                   @onchange="() => genOptions.IsGenerateVideo = false" checked="@(!genOptions.IsGenerateVideo)" disabled="@(isRunning || hasActiveSchedule)">
                            <label class="form-check-label" for="useLocalVideo">
                                <strong>로컬 파일 사용</strong> - 기존에 있는 영상 파일들을 업로드합니다
                            </label>
                        </div>
                    </div>

                    @if (genOptions.IsGenerateVideo)
                    {
                        <!-- AI 영상 생성 옵션들 -->
                        <div class="row mb-3">
                            <div class="col-md-4">
                                <label class="form-label"><strong>생성할 영상 개수: @genOptions.VideoCount 개</strong></label>
                                <input type="range" class="form-range" min="1" max="70" step="1" value="@genOptions.VideoCount" @oninput="OnVideoCountInput" disabled="@(isRunning || hasActiveSchedule)" />
                                    <small class="text-muted">1~10: 1개 단위, 11~70: 5개 단위</small>
                                <div class="text-primary">총 예상 비용: $@totalCost</div>
                            </div>
                            <div class="col-md-4">
                            <label class="form-label"><strong>영상 길이: @genOptions.SelectedDuration 초</strong></label>
                            <input type="range" 
                                   class="form-range" 
                                   min="2" 
                                   max="12" 
                                   step="1" 
                                   value="@genOptions.SelectedDuration" 
                                   @oninput="OnDurationInput" 
                                   disabled="@(isRunning || hasActiveSchedule)" />
                            <small class="text-muted">2초 ~ 12초</small>
                        </div>
                            <div class="col-md-4">
                                <label class="form-label"><strong>화면 비율:</strong></label>
                                <div>
                                    <button type="button" class="btn @GetAspectClass("9:16")" @onclick="@(() => genOptions.SelectedAspectRatio = "9:16")" disabled="@(isRunning || hasActiveSchedule)">9:16</button>
                                    <button type="button" class="btn @GetAspectClass("16:9")" @onclick="@(() => genOptions.SelectedAspectRatio = "16:9")" disabled="@(isRunning || hasActiveSchedule)">16:9</button>
                                    <button type="button" class="btn @GetAspectClass("1:1")" @onclick="@(() => genOptions.SelectedAspectRatio = "1:1")" disabled="@(isRunning || hasActiveSchedule)">1:1</button>
                                </div>
                            </div>
                        </div>

                        <!-- CSV 파일 업로드 -->
                        <div class="mb-3">
                            <label class="form-label"><strong>랜덤 프롬프트 CSV 파일:</strong></label>
                            <InputFile OnChange="HandleCsvFileSelection" accept=".csv" class="form-control" disabled="@(isRunning || hasActiveSchedule)" />
                            <div class="form-text">CSV 파일 형식: 첫 번째 열은 번호, 두 번째 열은 프롬프트 내용</div>

                            @if (genOptions.CsvPrompts.Count > 0 && string.IsNullOrEmpty(promptCsvError))
                            {
                                <div class="mt-2 alert alert-success">
                                    <strong>✅ 프롬프트 CSV 로드 완료</strong>
                                    <p class="mb-0">📊 총 @genOptions.CsvPrompts.Count 개의 프롬프트</p>
                                    <button type="button" class="btn btn-sm btn-outline-primary ms-2 mt-2" @onclick="ShowCsvPreview" disabled="@(isRunning || hasActiveSchedule)">
                                        미리보기
                                    </button>
                                </div>
                            }
                            
                            @if (!string.IsNullOrEmpty(promptCsvError) && genOptions.CsvPrompts.Count > 0)
                            {
                                <div class="mt-2 alert alert-warning">
                                    <pre class="mb-0" style="white-space: pre-wrap; font-family: inherit; font-size: 0.9em;">@promptCsvError</pre>
                                    <button type="button" class="btn btn-sm btn-outline-primary ms-2 mt-2" @onclick="ShowCsvPreview" disabled="@(isRunning || hasActiveSchedule)">
                                        미리보기
                                    </button>
                                </div>
                            }
                            
                            @if (!string.IsNullOrEmpty(promptCsvError) && genOptions.CsvPrompts.Count == 0)
                            {
                                <div class="mt-2 alert alert-danger">
                                    <strong>@promptCsvError</strong>
                                </div>
                            }
                        </div>
                        @if (genOptions.IsGenerateVideo)
                        {
                            <!-- 🔥 이미지 업로드 (선택사항) -->
                            <div class="mb-3">
                                <label class="form-label">
                                    <strong>📷 소스 이미지 (선택사항):</strong>
                                </label>
                                <InputFile OnChange="HandleSourceImageSelection" accept="image/*" class="form-control" 
                                           disabled="@(isRunning || hasActiveSchedule)" />
                                <div class="form-text">
                                    이미지를 업로드하면 해당 이미지를 기반으로 영상이 생성됩니다. (최대 10MB, 선택사항)
                                </div>
                                
                                @if (genOptions.SourceImageFile != null)
                                {
                                    <div class="mt-2 alert alert-success d-flex justify-content-between align-items-center">
                                        <span>
                                            <strong>✅ 선택된 이미지:</strong> @genOptions.SourceImageFile.Name 
                                            (@VideoGenerationService.FormatFileSize(genOptions.SourceImageFile.Size))
                                        </span>
                                        <button type="button" class="btn btn-sm btn-danger" @onclick="ClearSourceImage" 
                                                disabled="@(isRunning || hasActiveSchedule)">
                                            삭제
                                        </button>
                                    </div>
                                }
                            </div>
                        }
                    }
                    else
                    {
                        <!-- 로컬 파일 선택 옵션들 -->
                        <div class="mb-3">
                            <label class="form-label"><strong>로컬 영상 파일들:</strong></label>
                            <InputFile OnChange="HandleLocalVideoSelection" accept="video/*" multiple class="form-control" disabled="@(isRunning || hasActiveSchedule)" />
                            <div class="form-text">하나 또는 여러 개의 비디오 파일을 선택하세요 (각각 최대 2GB)</div>

                            @if (genOptions.LocalVideoFiles.Count > 0)
                            {
                                <div class="mt-2 alert alert-success">
                                    <strong>선택된 파일:</strong> @genOptions.LocalVideoFiles.Count 개
                                    <ul class="mb-0 mt-2">
                                        @foreach (var file in genOptions.LocalVideoFiles.Take(5))
                                        {
                                            <li>@file.Name (@VideoGenerationService.FormatFileSize(file.Size))</li>
                                        }
                                        @if (genOptions.LocalVideoFiles.Count > 5)
                                        {
                                            <li>... 외 @(genOptions.LocalVideoFiles.Count - 5)개 더</li>
                                        }
                                    </ul>
                                </div>
                            }
                        </div>
                    }
                </div>
            </div>

            <!-- 2. 후처리 설정 -->
            <div class="card mb-4">
                <div class="card-header bg-success text-white">
                    <h4>2. 후처리 설정</h4>
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" @bind="postOptions.EnablePostProcessing" id="enablePostProcessing" disabled="@(isRunning || hasActiveSchedule)">
                            <label class="form-check-label" for="enablePostProcessing">
                                <strong>영상 후처리 사용</strong>
                            </label>
                        </div>
                    </div>

                    @if (postOptions.EnablePostProcessing)
                    {
                        <div class="card bg-light">
                            <div class="card-body">
                                <div class="row">
                                    <div class="col-md-6">
                                        <div class="mb-3">
                                            <div class="form-check">
                                                <input class="form-check-input" type="checkbox" @bind="postOptions.AddCaption" id="addCaption" disabled="@(isRunning || hasActiveSchedule)">
                                                <label class="form-check-label" for="addCaption">
                                                    <strong>캡션 추가</strong>
                                                </label>
                                            </div>
                                            @if (postOptions.AddCaption)
                                            {
                                                <div class="mt-2">
                                                    <div class="form-check mb-2">
                                                        <input class="form-check-input" type="checkbox" @bind="postOptions.UseRandomCaption" @bind:after="OnRandomCaptionChanged" id="useRandomCaptionAllinone" disabled="@(isRunning || hasActiveSchedule)">
                                                        <label class="form-check-label" for="useRandomCaptionAllinone">
                                                            <strong>랜덤 캡션 (CSV 파일)</strong>
                                                        </label>
                                                    </div>
                                            
                                                    @if (postOptions.UseRandomCaption)
                                                    {
                                                        <div class="mb-2">
                                                            <label class="form-label form-label-sm">캡션 CSV 파일:</label>
                                                            <InputFile OnChange="HandleCaptionCsvSelection" accept=".csv" class="form-control form-control-sm" disabled="@(isRunning || hasActiveSchedule)" />
                                                            <div class="form-text">CSV 형식: 첫 번째 열은 번호, 두 번째 열은 캡션 텍스트</div>
                                                            
                                                            @if (postOptions.CaptionCsvList.Count > 0 && string.IsNullOrEmpty(captionCsvError))
                                                            {
                                                                <div class="mt-1 alert alert-success py-1 px-2 small">
                                                                    ✅ @postOptions.CaptionCsvList.Count 개 캡션 로드됨
                                                                    <button type="button" class="btn btn-sm btn-outline-primary ms-2" @onclick="ShowCaptionCsvPreview" disabled="@(isRunning || hasActiveSchedule)">
                                                                        미리보기
                                                                    </button>
                                                                </div>
                                                            }
                                                            
                                                            @if (!string.IsNullOrEmpty(captionCsvError) && postOptions.CaptionCsvList.Count > 0)
                                                            {
                                                                <div class="mt-1 alert alert-warning py-1 px-2 small">
                                                                    <pre class="mb-0" style="white-space: pre-wrap; font-family: inherit; font-size: 0.85em;">@captionCsvError</pre>
                                                                    <button type="button" class="btn btn-sm btn-outline-primary ms-2 mt-1" @onclick="ShowCaptionCsvPreview" disabled="@(isRunning || hasActiveSchedule)">
                                                                        미리보기
                                                                    </button>
                                                                </div>
                                                            }
                                                            
                                                            @if (!string.IsNullOrEmpty(captionCsvError) && postOptions.CaptionCsvList.Count == 0)
                                                            {
                                                                <div class="mt-1 alert alert-danger py-1 px-2 small">
                                                                    <strong>@captionCsvError</strong>
                                                                </div>
                                                            }
                                                        </div>
                                                    }
                                                    else
                                                    {
                                                        <input type="text" class="form-control form-control-sm mb-2" @bind="postOptions.CaptionText" placeholder="캡션 텍스트" disabled="@(isRunning || hasActiveSchedule)" />
                                                    }
                                            
                                                    <div class="row mt-2">
                                                        <div class="col-4">
                                                            <select class="form-select form-select-sm" @bind="postOptions.CaptionPosition" disabled="@(isRunning || hasActiveSchedule)">
                                                                <option value="top">상단</option>
                                                                <option value="center">중앙</option>
                                                                <option value="bottom">하단</option>
                                                                <option value="random">랜덤</option>
                                                            </select>
                                                        </div>
                                                        <div class="col-4">
                                                            <select class="form-select form-select-sm" @bind="postOptions.CaptionSize" disabled="@(isRunning || hasActiveSchedule)">
                                                                <option value="60">작게</option>
                                                                <option value="80">보통</option>
                                                                <option value="120">크게</option>
                                                                <option value="random">랜덤</option>
                                                            </select>
                                                        </div>
                                                        <div class="col-4">
                                                            <select class="form-select form-select-sm" @bind="postOptions.CaptionColor" disabled="@(isRunning || hasActiveSchedule)">
                                                                <option value="white">흰색</option>
                                                                <option value="yellow">노란색</option>
                                                                <option value="red">빨간색</option>
                                                                <option value="black">검정색</option>
                                                                <option value="random">랜덤</option>
                                                            </select>
                                                        </div>
                                                    </div>
                                                </div>
                                            }
                                    
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="mb-3">
                                            <div class="form-check">
                                                <input class="form-check-input" type="checkbox" @bind="postOptions.AddBackgroundMusic" id="addBackgroundMusic" disabled="@(isRunning || hasActiveSchedule)">
                                                <label class="form-check-label" for="addBackgroundMusic">
                                                    <strong>배경음악 추가</strong>
                                                </label>
                                            </div>
                                            @if (postOptions.AddBackgroundMusic)
                                            {
                                                <div class="mt-2">
                                                    <div class="mb-2">
                                                        <label class="form-label form-label-sm">배경음악 파일들:</label>
                                                        <InputFile OnChange="HandleMusicFileSelection" accept="audio/*" multiple class="form-control form-control-sm" disabled="@(isRunning || hasActiveSchedule)" />
                                                        <div class="form-text">여러 개 선택 가능. 지원 형식: MP3, WAV, M4A, AAC (각 최대 10MB)</div>
                                                        
                                                        @if (postOptions.SelectedMusicFiles.Count > 0)
                                                        {
                                                            <div class="mt-1 alert alert-success py-1 px-2 small">
                                                                ✓ @postOptions.SelectedMusicFiles.Count 개 파일 선택됨
                                                                <ul class="mb-0 mt-1">
                                                                    @foreach (var file in postOptions.SelectedMusicFiles.Take(3))
                                                                    {
                                                                        <li>@file.Name (@VideoGenerationService.FormatFileSize(file.Size))</li>
                                                                    }
                                                                    @if (postOptions.SelectedMusicFiles.Count > 3)
                                                                    {
                                                                        <li>... 외 @(postOptions.SelectedMusicFiles.Count - 3)개 더</li>
                                                                    }
                                                                </ul>
                                                            </div>
                                                        }
                                                    </div>
                                                    <label class="form-label form-label-sm">음량: @postOptions.MusicVolume</label>
                                                    <input type="range" class="form-range" min="0.1" max="1.0" step="0.1" @bind="postOptions.MusicVolume" disabled="@(isRunning || hasActiveSchedule)" />
                                                </div>
                                            }
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>

            <!-- 3. YouTube 업로드 설정 -->
            <div class="card mb-4">
                <div class="card-header bg-danger text-white">
                    <h4>3. YouTube 업로드 설정</h4>
                </div>
                <div class="card-body">
                    <!-- YouTube 계정 상태 -->
                    <div class="mb-3">
                        @if (YouTubeService.CurrentAccount == null)
                        {
                            <div class="alert alert-warning">
                                <strong>YouTube 계정 연동 필요</strong>
                                <button type="button" class="btn btn-danger btn-sm ms-2" @onclick="AuthenticateYouTube" disabled="@(isAuthenticating || isRunning)">
                                    @if (isAuthenticating)
                                    {
                                        <span>인증 중...</span>
                                    }
                                    else
                                    {
                                        <span>계정 연동</span>
                                    }
                                </button>
                            </div>
                        }
                        else
                        {
                            <div class="alert alert-success">
                                <strong>연동된 계정:</strong> @YouTubeService.CurrentAccount.ChannelTitle
                                <small class="text-muted ms-2">구독자: @YouTubeUploadService.FormatSubscriberCount(YouTubeService.CurrentAccount.SubscriberCount)명</small>
                                <button type="button" class="btn btn-outline-secondary btn-sm ms-2" @onclick="SwitchYouTubeAccount" disabled="@(isRunning || hasActiveSchedule)">
                                    계정 전환
                                </button>
                            </div>
                        }
                    </div>
            
                    <!-- 랜덤 업로드 정보 사용 체크박스 -->
                    <div class="mb-4">
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" @bind="useRandomUploadInfo" @bind:after="OnRandomUploadInfoChanged" id="useRandomUploadInfo" disabled="@(isRunning || hasActiveSchedule)">
                            <label class="form-check-label" for="useRandomUploadInfo">
                                <strong>랜덤 업로드 정보 사용 (CSV 파일)</strong>
                            </label>
                        </div>
                        <div class="form-text">제목, 설명, 태그를 CSV 파일에서 랜덤으로 선택합니다.</div>
                    </div>
            
                    @if (useRandomUploadInfo)
                    {
                        <!-- CSV 파일 업로드 -->
                        <div class="mb-4">
                            <label class="form-label"><strong>업로드 정보 CSV 파일:</strong></label>
                            <InputFile OnChange="HandleUploadInfoCsvSelection" accept=".csv" class="form-control" disabled="@(isRunning || hasActiveSchedule)" />
                            <div class="form-text">
                                CSV 파일 형식: 1열(번호), 2열(제목), 3열(설명), 4열(태그)
                                <br />
                                예시: 1, "제목 예시", "설명 예시", "#태그1, #태그2, #태그3"
                            </div>
                            
                            <!-- 쉼표 사용 금지 경고 -->
                            <div class="alert alert-secondary mt-2 py-2">
                                <i class="fas fa-exclamation-triangle"></i>
                                <strong>중요:</strong> <span class="text-danger fw-bold">쉼표(,) 사용을 금지</span>합니다. 
                                <br />
                                쉼표 대신 <span class="text-primary">마침표(.), 슬래쉬(/), 세미콜론(;), 또는 줄표(-)</span>를 사용해주세요.
                            </div>
                        
                            @if (uploadInfoCsvList.Count > 0 && string.IsNullOrEmpty(uploadInfoCsvError))
                            {
                                <div class="mt-2 alert alert-success">
                                    <strong>✅ 업로드 정보 CSV 로드 완료</strong>
                                    <p class="mb-0">📊 총 @uploadInfoCsvList.Count 개의 업로드 정보</p>
                                    <button type="button" class="btn btn-sm btn-outline-primary ms-2 mt-2" @onclick="ShowUploadInfoCsvPreview" disabled="@(isRunning || hasActiveSchedule)">
                                        미리보기
                                    </button>
                                </div>
                            }
                            
                            @if (!string.IsNullOrEmpty(uploadInfoCsvError) && uploadInfoCsvList.Count > 0)
                            {
                                <div class="mt-2 alert alert-warning">
                                    <pre class="mb-0" style="white-space: pre-wrap; font-family: inherit; font-size: 0.9em;">@uploadInfoCsvError</pre>
                                    <button type="button" class="btn btn-sm btn-outline-primary ms-2 mt-2" @onclick="ShowUploadInfoCsvPreview" disabled="@(isRunning || hasActiveSchedule)">
                                        미리보기
                                    </button>
                                </div>
                            }
                            
                            @if (!string.IsNullOrEmpty(uploadInfoCsvError) && uploadInfoCsvList.Count == 0)
                            {
                                <div class="mt-2 alert alert-danger">
                                    <strong>@uploadInfoCsvError</strong>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <!-- 수동 입력 모드 -->
                        <div class="mb-3">
                            <label class="form-label"><strong>제목 템플릿:</strong></label>
                            <input type="text" class="form-control" @bind="uploadOptions.TitleTemplate" placeholder="예: Runmoa #NUMBER" disabled="@(isRunning || hasActiveSchedule)" />
                            <div class="form-text">#NUMBER는 자동으로 #1, #2, #3... 으로 변환됩니다</div>
                        </div>
                        
                        <div class="mb-3">
                            <label class="form-label"><strong>설명:</strong></label>
                            <textarea class="form-control" rows="3" @bind="uploadOptions.Description" placeholder="영상 설명" disabled="@(isRunning || hasActiveSchedule)"></textarea>
                        </div>
                        
                        <div class="mb-3">
                            <label class="form-label"><strong>태그:</strong></label>
                            <input type="text" class="form-control" @bind="uploadOptions.Tags" placeholder="태그1, 태그2, 태그3" disabled="@(isRunning || hasActiveSchedule)" />
                        </div>
                    }
            
                    <!-- 공개 설정 (항상 표시) -->
                    <div class="mb-3">
                        <label class="form-label"><strong>공개 설정:</strong></label>
                        <select class="form-select" @bind="uploadOptions.PrivacySetting" disabled="@(isRunning || hasActiveSchedule)">
                            <option value="비공개">비공개</option>
                            <option value="공개">공개</option>
                            <option value="링크 공유">링크 공유</option>
                        </select>
                    </div>
                </div>
            </div>

            <!-- 4. 업로드 방식 설정 -->
            <div class="card mb-4">
                <div class="card-header bg-warning text-dark">
                    <h4>4. 업로드 방식 설정</h4>
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <div class="form-check">
                            <input class="form-check-input" type="radio" name="uploadMode" id="immediateUpload"
                                   @onchange="() => isScheduleUpload = false" checked="@(!isScheduleUpload)" disabled="@(isRunning || hasActiveSchedule)">
                            <label class="form-check-label" for="immediateUpload">
                                <strong>즉시 업로드</strong> - 영상 생성 완료 후 바로 순차 업로드
                            </label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input" type="radio" name="uploadMode" id="scheduleUpload"
                                   @onchange="() => isScheduleUpload = true" checked="@isScheduleUpload" disabled="@(isRunning || hasActiveSchedule)">
                            <label class="form-check-label" for="scheduleUpload">
                                <strong>스케줄 업로드</strong> - 지정된 시간에 랜덤하게 자동 업로드
                            </label>
                        </div>
                    </div>

                    @if (isScheduleUpload)
                    {
                        <div class="row">
                            <div class="col-md-4">
                                <label class="form-label">업로드 기간: @FormatScheduleHours(scheduleHours)</label>
                                <input type="range" class="form-range" min="0.5" max="480" step="0.5" 
                                       value="@scheduleHours" @oninput="OnScheduleHoursInput" disabled="@(isRunning || hasActiveSchedule)" />
                                <div class="form-text">@FormatScheduleHours(scheduleHours) 동안 업로드를 분산</div>
                                <small class="text-muted">0.5~24시간: 0.5시간 단위, 24~480시간: 12시간 단위</small>
                            </div>
                            <div class="col-md-4">
                                <label class="form-label">최소 간격: @FormatMinInterval(minIntervalMinutes)</label>
                                <input type="range" class="form-range" min="7" max="360" step="1" 
                                       value="@minIntervalMinutes" @oninput="OnMinIntervalInput" disabled="@(isRunning || hasActiveSchedule)" />
                                <div class="form-text">업로드 간 최소 @FormatMinInterval(minIntervalMinutes) 간격</div>
                                <small class="text-muted">7~180분: 1분 단위, 180~360분: 15분 단위</small>
                            </div>
                            <div class="col-md-4">
                                <div class="form-check mt-3">
                                    <input class="form-check-input" type="checkbox" @bind="randomizeOrder" @bind:after="UpdateSchedulePreview" id="randomizeOrder" disabled="@(isRunning || hasActiveSchedule)">
                                    <label class="form-check-label" for="randomizeOrder">
                                        업로드 순서 랜덤화
                                    </label>
                                </div>
                            </div>
                        </div>

                        @if (schedulePreviewList.Count > 0)
                        {
                            <div class="mt-3 alert alert-info">
                                <h6>예상 업로드 스케줄:</h6>
                                <ul class="mb-0">
                                @if (schedulePreviewList.Count <= 5)
                                {
                                    @foreach (var item in schedulePreviewList)
                                    {
                                        <li>영상 #@item.Index -> @item.ScheduledTime.ToString("MM/dd HH:mm")</li>
                                    }
                                }
                                else
                                {
                                    @* 처음 3개 *@
                                    @foreach (var item in schedulePreviewList.Take(3))
                                    {
                                        <li>영상 #@item.Index -> @item.ScheduledTime.ToString("MM/dd HH:mm")</li>
                                    }
                                    <li class="text-muted">... 중간 @(schedulePreviewList.Count - 4)개 생략 ...</li>
                                    @* 마지막 1개 *@
                                    <li>영상 #@schedulePreviewList.Last().Index -> @schedulePreviewList.Last().ScheduledTime.ToString("MM/dd HH:mm")</li>
                                }
                            </ul>
                                <button type="button" class="btn btn-sm btn-outline-primary mt-2" @onclick="UpdateSchedulePreview" disabled="@(isRunning || hasActiveSchedule)">
                                    스케줄 다시 계산
                                </button>
                            </div>
                        }
                    }
                </div>
            </div>

            <!-- 5. 실행 버튼 -->
            <div class="card mb-4">
                <div class="card-body text-center">
                    <button type="button" class="btn btn-success btn-lg px-5" @onclick="StartAllInOne"
                            disabled="@(!CanStart || isRunning)">
                        @if (isRunning)
                        {
                            <span>실행 중...</span>
                        }
                        else if (hasActiveSchedule)
                        {
                            <span>스케줄 업로드 진행 중...</span>
                        }
                        else
                        {
                            <span>🚀 All-in-One 시작</span>
                        }
                    </button>

                    @if (isRunning)
                    {
                        <button type="button" class="btn btn-outline-danger btn-lg px-3 ms-3" @onclick="StopAllInOne">
                            중지
                        </button>
                    }
                </div>
            </div>

            <!-- 진행률 표시 -->
            @if (isRunning)
            {
                <div class="card mb-4">
                    <div class="card-header">
                        <h5>진행 상황</h5>
                    </div>
                    <div class="card-body">
                        <div class="progress mb-3">
                            <div class="progress-bar progress-bar-striped progress-bar-animated"
                                 style="width: @(currentProgress)%"></div>
                        </div>
                        <div class="text-info">@statusMessage</div>
                        @if (!string.IsNullOrEmpty(currentPromptUsed))
                        {
                            <div class="text-muted small mt-1">현재 프롬프트: @currentPromptUsed</div>
                        }

                        @if (generatedVideos.Count > 0)
                        {
                            <div class="mt-3">
                                <h6>생성된 영상:</h6>
                                <ul class="list-group">
                                    @foreach (var video in generatedVideos)
                                    {
                                        <li class="list-group-item d-flex justify-content-between align-items-center">
                                            <span>@video.FileName</span>
                                            <span class="badge bg-@(video.IsScheduled ? "success" : "secondary")">
                                                @(video.IsScheduled ? "스케줄 등록됨" : "처리 중")
                                            </span>
                                        </li>
                                    }
                                </ul>
                            </div>
                        }
                    </div>
                </div>
            }

            <!-- 스케줄 진행률 표시 -->
            @if (hasActiveSchedule && !isRunning)
            {
                <div class="card mb-4">
                    <div class="card-header">
                        <h5>스케줄 업로드 진행 중</h5>
                    </div>
                    <div class="card-body">
                        <div class="progress mb-3">
                            <div class="progress-bar progress-bar-striped progress-bar-animated bg-info" style="width: 100%"></div>
                        </div>
                        <div class="text-info">@statusMessage</div>
                        <div class="text-muted small">웹 애플리케이션을 종료하지 마세요. 백그라운드에서 자동 업로드가 진행됩니다.</div>

                        @if (!string.IsNullOrEmpty(nextUploadInfo))
                        {
                            <div class="mt-2 alert alert-info">
                                <small><strong>다음 업로드:</strong> @nextUploadInfo</small>
                            </div>
                        }
                    </div>
                </div>
            }

            <!-- 완료 결과 -->
            @if (!string.IsNullOrEmpty(resultMessage))
            {
                <div class="alert @GetResultAlertClass()">
                    <h5>@GetResultTitle()</h5>
                    <p>@resultMessage</p>
                </div>
            }

        </div>
    </div>
</div>

<!-- CSV 미리보기 모달 -->
@if (showCsvPreview)
{
    <div class="modal show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">프롬프트 미리보기</h5>
                    <button type="button" class="btn-close" @onclick="() => showCsvPreview = false" disabled="@(isRunning || hasActiveSchedule)"></button>
                </div>
                <div class="modal-body">
                    <p><strong>총 @genOptions.CsvPrompts.Count 개의 프롬프트가 로드되었습니다.</strong></p>
                    <div style="max-height: 300px; overflow-y: auto;">
                        @for (int i = 0; i < Math.Min(10, genOptions.CsvPrompts.Count); i++)
                        {
                            <div class="mb-2">
                                <strong>@(i + 1).</strong> @genOptions.CsvPrompts[i]
                            </div>
                        }
                        @if (genOptions.CsvPrompts.Count > 10)
                        {
                            <div class="text-muted">... 외 @(genOptions.CsvPrompts.Count - 10) 개 더</div>
                        }
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="() => showCsvPreview = false" disabled="@(isRunning || hasActiveSchedule)">닫기</button>
                </div>
            </div>
        </div>
    </div>
}

<!-- 캡션 CSV 미리보기 모달 -->
@if (showCaptionCsvPreview)
{
    <div class="modal show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">캡션 미리보기</h5>
                    <button type="button" class="btn-close" @onclick="() => showCaptionCsvPreview = false" disabled="@(isRunning || hasActiveSchedule)"></button>
                </div>
                <div class="modal-body">
                    <p><strong>총 @postOptions.CaptionCsvList.Count 개의 캡션이 로드되었습니다.</strong></p>
                    <div style="max-height: 300px; overflow-y: auto;">
                        @for (int i = 0; i < Math.Min(10, postOptions.CaptionCsvList.Count); i++)
                        {
                            <div class="mb-2">
                                <strong>@(i + 1).</strong> @postOptions.CaptionCsvList[i]
                            </div>
                        }
                        @if (postOptions.CaptionCsvList.Count > 10)
                        {
                            <div class="text-muted">... 외 @(postOptions.CaptionCsvList.Count - 10) 개 더</div>
                        }
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="() => showCaptionCsvPreview = false" disabled="@(isRunning || hasActiveSchedule)">닫기</button>
                </div>
            </div>
        </div>
    </div>
}
<!-- 업로드 정보 CSV 미리보기 모달 -->
@if (showUploadInfoCsvPreview)
{
    <div class="modal show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">업로드 정보 미리보기</h5>
                    <button type="button" class="btn-close" @onclick="() => showUploadInfoCsvPreview = false" disabled="@(isRunning || hasActiveSchedule)"></button>
                </div>
                <div class="modal-body">
                    <p><strong>총 @uploadInfoCsvList.Count 개의 업로드 정보가 로드되었습니다.</strong></p>
                    <div style="max-height: 400px; overflow-y: auto;">
                        @for (int i = 0; i < Math.Min(5, uploadInfoCsvList.Count); i++)
                        {
                            <div class="card mb-2">
                                <div class="card-body">
                                    <h6 class="card-title">@(i + 1). @uploadInfoCsvList[i].Title</h6>
                                    <p class="card-text small mb-1"><strong>설명:</strong> @uploadInfoCsvList[i].Description</p>
                                    <p class="card-text small mb-0"><strong>태그:</strong> @uploadInfoCsvList[i].Tags</p>
                                </div>
                            </div>
                        }
                        @if (uploadInfoCsvList.Count > 5)
                        {
                            <div class="text-muted text-center">... 외 @(uploadInfoCsvList.Count - 5) 개 더</div>
                        }
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="() => showUploadInfoCsvPreview = false" disabled="@(isRunning || hasActiveSchedule)">닫기</button>
                </div>
            </div>
        </div>
    </div>
}


@code {
    // 🔥 통합 서비스 사용 - Options 클래스들
    private VideoGenerationService.VideoGenerationOptions genOptions = new();
    private VideoGenerationService.PostProcessingOptions postOptions = new();
    private YouTubeUploadService.UploadOptions uploadOptions = new();

    private bool CanStart
    {
        get
        {
            if (hasActiveSchedule) return false;
            if (!YouTubeService.IsAuthenticated) return false;
            if (!useRandomUploadInfo && string.IsNullOrWhiteSpace(uploadOptions.TitleTemplate))
                return false;
            if (useRandomUploadInfo && uploadInfoCsvList.Count == 0)
                return false;
            if (genOptions.IsGenerateVideo && genOptions.CsvPrompts.Count == 0)
                return false;
            if (!genOptions.IsGenerateVideo && genOptions.LocalVideoFiles.Count == 0)
                return false;
            return true;
        }
    }

    // UI 상태
    private bool showCsvPreview = false;
    private bool showCaptionCsvPreview = false;
    private bool isAuthenticating = false;
    private bool isScheduleUpload = true;
    private List<SchedulePreviewItem> schedulePreviewList = new List<SchedulePreviewItem>();
    private Dictionary<int, DateTime> savedScheduleTimes = new Dictionary<int, DateTime>();

    public class SchedulePreviewItem
    {
        public int Index { get; set; }
        public DateTime ScheduledTime { get; set; }
    }

    private float scheduleHours = 2.0f;
    private int minIntervalMinutes = 7;
    private bool randomizeOrder = true;
    private bool useRandomUploadInfo = false;
    private List<UploadInfoItem> uploadInfoCsvList = new List<UploadInfoItem>();
    private bool showUploadInfoCsvPreview = false;

    public class UploadInfoItem
    {
        public string Title { get; set; } = "";
        public string Description { get; set; } = "";
        public string Tags { get; set; } = "";
    }

    private bool isRunning = false;
    private bool isCancelled = false;
    private int currentProgress = 0;
    private string statusMessage = "";
    private string currentPromptUsed = "";
    private string resultMessage = "";
    private bool isResultError = false;
    private List<GeneratedVideo> generatedVideos = new List<GeneratedVideo>();
    private bool hasActiveSchedule = false;
    private System.Timers.Timer? scheduleStatusTimer;
    private string nextUploadInfo = "";
    
    // CSV 검증 에러 메시지
    private string promptCsvError = "";
    private string captionCsvError = "";
    private string uploadInfoCsvError = "";

    public class GeneratedVideo
    {
        public string FileName { get; set; } = "";
        public string FilePath { get; set; } = "";
        public bool IsScheduled { get; set; } = false;
    }

    private string totalCost => (genOptions.VideoCount * genOptions.SelectedDuration * 0.15m).ToString("F2");

    private string GetAspectClass(string ratio) =>
        genOptions.SelectedAspectRatio == ratio ? "btn-success" : "btn-outline-success";

    // 입력 핸들러들
    private void OnVideoCountInput(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int value))
        {
            if (value > 10)
            {
                value = (int)Math.Round(value / 5.0) * 5;
                value = Math.Max(10, Math.Min(70, value));
            }
            else
            {
                value = Math.Max(1, Math.Min(10, value));
            }
            
            genOptions.VideoCount = value;
            OnVideoCountChanged();
        }
    }

    private void OnDurationInput(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int duration))
        {
            genOptions.SelectedDuration = duration;
            StateHasChanged();
        }
    }

    private void OnScheduleHoursInput(ChangeEventArgs e)
    {
        if (float.TryParse(e.Value?.ToString(), out float value))
        {
            if (value >= 24)
            {
                value = (float)Math.Round(value / 12.0) * 12;
                value = Math.Max(24, Math.Min(480, value));
            }
            else
            {
                value = (float)Math.Round(value * 2) / 2;
                value = Math.Max(0.5f, Math.Min(24, value));
            }
            
            scheduleHours = value;
            UpdateSchedulePreview();
        }
    }
    
    private void OnMinIntervalInput(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int value))
        {
            if (value >= 180)
            {
                value = (int)Math.Round(value / 15.0) * 15;
                value = Math.Max(180, Math.Min(360, value));
            }
            else
            {
                value = Math.Max(7, Math.Min(180, value));
            }
            
            minIntervalMinutes = value;
            UpdateSchedulePreview();
        }
    }
    
    private string FormatScheduleHours(float hours)
    {
        if (hours >= 24)
        {
            float days = hours / 24;
            return $"{days:F1} days";
        }
        return $"{hours:F1} 시간";
    }
    
    private string FormatMinInterval(int minutes)
    {
        if (minutes >= 180)
        {
            float hours = minutes / 60f;
            return $"{hours:F1} 시간";
        }
        return $"{minutes} 분";
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var uri = new Uri(await JSRuntime.InvokeAsync<string>("eval", "window.location.href"));
            var query = System.Web.HttpUtility.ParseQueryString(uri.Query);
            
            if (query["auth"] == "success")
            {
                await YouTubeService.CheckExistingAuthAsync();
                await JSRuntime.InvokeVoidAsync("alert", "YouTube 계정 연동 성공!");
                StateHasChanged();
            }
            else if (query["auth"] == "error")
            {
                string message = query["message"] ?? "알 수 없는 오류";
                await JSRuntime.InvokeVoidAsync("alert", $"YouTube 계정 연동 실패: {message}");
            }

            await CheckInitialAuthenticationAsync();
            int queueCount = ScheduledUploadService.GetQueueCount();
            if (queueCount > 0)
            {
                hasActiveSchedule = true;
                StartScheduleStatusTracking();
            }
        }
    }

    private async Task CheckInitialAuthenticationAsync()
    {
        try
        {
            await YouTubeService.CheckExistingAuthAsync();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"인증 확인 실패: {ex.Message}");
        }
    }

    private async Task AuthenticateYouTube()
    {
        try
        {
            isAuthenticating = true;
            string authUrl = await YouTubeService.GetAuthorizationUrlAsync(JSRuntime, "all-in-one");
            await JSRuntime.InvokeVoidAsync("open", authUrl, "_self");
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"인증 실패: {ex.Message}");
        }
        finally
        {
            isAuthenticating = false;
        }
    }

    private async Task SwitchYouTubeAccount()
    {
        bool confirm = await JSRuntime.InvokeAsync<bool>("confirm", 
            "현재 계정 연동을 해제하고 다른 계정으로 전환하시겠습니까?");
        
        if (!confirm) return;
        
        await YouTubeService.SwitchAccountAsync();
        StateHasChanged();
        await AuthenticateYouTube();
    }

    private async Task HandleCsvFileSelection(InputFileChangeEventArgs e)
    {
        promptCsvError = "";
        genOptions.CsvPrompts.Clear();
        
        var file = e.File;
        if (file == null) return;

        try
        {
            const long maxSize = 10 * 1024 * 1024;
            if (file.Size > maxSize)
            {
                promptCsvError = "❌ 파일 크기가 너무 큽니다 (최대 10MB)";
                await JSRuntime.InvokeVoidAsync("alert", promptCsvError);
                return;
            }

            using var stream = file.OpenReadStream(maxSize);
            using var reader = new StreamReader(stream);
            var content = await reader.ReadToEndAsync();

            var (isValid, errorMessage, prompts) = ValidatePromptCsv(content);
            
            if (!isValid)
            {
                promptCsvError = errorMessage;
                await JSRuntime.InvokeVoidAsync("alert", errorMessage);
                return;
            }

            genOptions.CsvPrompts = prompts;
            promptCsvError = errorMessage; // 경고 메시지 저장 (있다면)
            OnVideoCountChanged();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            promptCsvError = $"❌ 파일 읽기 실패\n\n{ex.Message}";
            await JSRuntime.InvokeVoidAsync("alert", promptCsvError);
            genOptions.CsvPrompts.Clear();
        }
    }

    private void ShowCsvPreview()
    {
        showCsvPreview = true;
    }

    private void ShowCaptionCsvPreview()
    {
        showCaptionCsvPreview = true;
    }

    private void ShowUploadInfoCsvPreview()
    {
        showUploadInfoCsvPreview = true;
    }

    private async Task HandleSourceImageSelection(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null && file.Size <= 10 * 1024 * 1024)
        {
            genOptions.SourceImageFile = file;
            StateHasChanged();
        }
        else if (file != null)
        {
            await JSRuntime.InvokeVoidAsync("alert", "이미지 파일은 최대 10MB까지만 가능합니다.");
        }
    }

    private void ClearSourceImage()
    {
        genOptions.SourceImageFile = null;
        StateHasChanged();
    }

    private async Task HandleLocalVideoSelection(InputFileChangeEventArgs e)
    {
        genOptions.LocalVideoFiles = e.GetMultipleFiles(20).ToList();
        StateHasChanged();
    }

    private void OnRandomCaptionChanged()
    {
        if (!postOptions.UseRandomCaption)
        {
            postOptions.CaptionCsvList.Clear();
        }
    }

    private async Task HandleCaptionCsvSelection(InputFileChangeEventArgs e)
    {
        captionCsvError = "";
        postOptions.CaptionCsvList.Clear();
        
        var file = e.File;
        if (file == null) return;

        try
        {
            const long maxSize = 10 * 1024 * 1024;
            if (file.Size > maxSize)
            {
                captionCsvError = "❌ 파일 크기가 너무 큽니다 (최대 10MB)";
                await JSRuntime.InvokeVoidAsync("alert", captionCsvError);
                return;
            }

            using var stream = file.OpenReadStream(maxSize);
            using var reader = new StreamReader(stream);
            var content = await reader.ReadToEndAsync();

            var (isValid, errorMessage, captions) = ValidateCaptionCsv(content);
            
            if (!isValid)
            {
                captionCsvError = errorMessage;
                await JSRuntime.InvokeVoidAsync("alert", errorMessage);
                return;
            }

            postOptions.CaptionCsvList = captions;
            captionCsvError = errorMessage; // 경고 메시지 저장 (있다면)
            StateHasChanged();
        }
        catch (Exception ex)
        {
            captionCsvError = $"❌ 파일 읽기 실패\n\n{ex.Message}";
            await JSRuntime.InvokeVoidAsync("alert", captionCsvError);
            postOptions.CaptionCsvList.Clear();
        }
    }

    private async Task HandleMusicFileSelection(InputFileChangeEventArgs e)
    {
        postOptions.SelectedMusicFiles = e.GetMultipleFiles(10).ToList();
        StateHasChanged();
    }

    private void OnRandomUploadInfoChanged()
    {
        if (!useRandomUploadInfo)
        {
            uploadInfoCsvList.Clear();
        }
    }

    private async Task HandleUploadInfoCsvSelection(InputFileChangeEventArgs e)
    {
        uploadInfoCsvError = "";
        uploadInfoCsvList.Clear();
        
        var file = e.File;
        if (file == null) return;

        try
        {
            const long maxSize = 10 * 1024 * 1024;
            if (file.Size > maxSize)
            {
                uploadInfoCsvError = "❌ 파일 크기가 너무 큽니다 (최대 10MB)";
                await JSRuntime.InvokeVoidAsync("alert", uploadInfoCsvError);
                return;
            }

            using var stream = file.OpenReadStream(maxSize);
            using var reader = new StreamReader(stream);
            var content = await reader.ReadToEndAsync();

            var (isValid, errorMessage, uploadInfos) = ValidateUploadInfoCsv(content);
            
            if (!isValid)
            {
                uploadInfoCsvError = errorMessage;
                await JSRuntime.InvokeVoidAsync("alert", errorMessage);
                return;
            }

            foreach (var info in uploadInfos)
            {
                uploadInfoCsvList.Add(new UploadInfoItem 
                { 
                    Title = info.Title, 
                    Description = info.Description, 
                    Tags = info.Tags 
                });
            }
            uploadInfoCsvError = errorMessage; // 경고 메시지 저장 (있다면)
            StateHasChanged();
        }
        catch (Exception ex)
        {
            uploadInfoCsvError = $"❌ 파일 읽기 실패\n\n{ex.Message}";
            await JSRuntime.InvokeVoidAsync("alert", uploadInfoCsvError);
            uploadInfoCsvList.Clear();
        }
    }

    
    // CSV 검증 메서드들
    private (bool isValid, string errorMessage, List<string> prompts) ValidatePromptCsv(string csvContent)
    {
        var prompts = new List<string>();
        int totalLines = 0;
        int errorLines = 0;
        bool hasColumnError = false;
        bool hasEmptyError = false;
        
        var lines = csvContent.Split('\n', StringSplitOptions.RemoveEmptyEntries);
        
        if (lines.Length == 0)
        {
            return (false, "❌ CSV 파일이 비어있습니다.", prompts);
        }
        
        foreach (var line in lines)
        {
            totalLines++;
            var trimmedLine = line.Trim();
            if (string.IsNullOrWhiteSpace(trimmedLine)) continue;
            
            var columns = trimmedLine.Split(',');
            
            if (columns.Length != 2)
            {
                hasColumnError = true;
                errorLines++;
                continue;
            }
            
            var promptText = columns[1].Trim();
            if (string.IsNullOrWhiteSpace(promptText))
            {
                hasEmptyError = true;
                errorLines++;
                continue;
            }
            
            prompts.Add(promptText);
        }
        
        // 유효한 데이터가 있으면 경고만 표시
        if (prompts.Count > 0)
        {
            if (errorLines > 0)
            {
                var warnings = new List<string>();
                if (hasColumnError) warnings.Add("컬럼 수 오류");
                if (hasEmptyError) warnings.Add("빈 프롬프트");
                
                var warningMsg = $"⚠️ 일부 오류 발견 ({errorLines}/{totalLines}줄)\n" +
                                $"문제: {string.Join(", ", warnings)}\n" +
                                $"✅ {prompts.Count}개는 정상 로드됨";
                return (true, warningMsg, prompts);
            }
            return (true, "", prompts);
        }
        
        // 유효한 데이터가 없으면 에러
        return (false, "❌ 유효한 프롬프트가 없습니다", prompts);
    }

    private (bool isValid, string errorMessage, List<string> captions) ValidateCaptionCsv(string csvContent)
    {
        var captions = new List<string>();
        int totalLines = 0;
        int errorLines = 0;
        bool hasColumnError = false;
        bool hasEmptyError = false;
        
        var lines = csvContent.Split('\n', StringSplitOptions.RemoveEmptyEntries);
        
        if (lines.Length == 0)
        {
            return (false, "❌ CSV 파일이 비어있습니다.", captions);
        }
        
        foreach (var line in lines)
        {
            totalLines++;
            var trimmedLine = line.Trim();
            if (string.IsNullOrWhiteSpace(trimmedLine)) continue;
            
            var columns = trimmedLine.Split(',');
            
            if (columns.Length != 2)
            {
                hasColumnError = true;
                errorLines++;
                continue;
            }
            
            var captionText = columns[1].Trim();
            if (string.IsNullOrWhiteSpace(captionText))
            {
                hasEmptyError = true;
                errorLines++;
                continue;
            }
            
            captions.Add(captionText);
        }
        
        // 유효한 데이터가 있으면 경고만 표시
        if (captions.Count > 0)
        {
            if (errorLines > 0)
            {
                var warnings = new List<string>();
                if (hasColumnError) warnings.Add("컬럼 수 오류");
                if (hasEmptyError) warnings.Add("빈 캡션");
                
                var warningMsg = $"⚠️ 일부 오류 발견 ({errorLines}/{totalLines}줄)\n" +
                                $"문제: {string.Join(", ", warnings)}\n" +
                                $"✅ {captions.Count}개는 정상 로드됨";
                return (true, warningMsg, captions);
            }
            return (true, "", captions);
        }
        
        return (false, "❌ 유효한 캡션이 없습니다", captions);
    }

    private (bool isValid, string errorMessage, List<(string Title, string Description, string Tags)> uploadInfos) ValidateUploadInfoCsv(string csvContent)
    {
        var uploadInfos = new List<(string Title, string Description, string Tags)>();
        int totalLines = 0;
        int errorLines = 0;
        bool hasColumnError = false;
        bool hasEmptyTitleError = false;
        
        var lines = csvContent.Split('\n', StringSplitOptions.RemoveEmptyEntries);
        
        if (lines.Length == 0)
        {
            return (false, "❌ CSV 파일이 비어있습니다.", uploadInfos);
        }
        
        foreach (var line in lines)
        {
            totalLines++;
            var trimmedLine = line.Trim();
            if (string.IsNullOrWhiteSpace(trimmedLine)) continue;
            
            var columns = trimmedLine.Split(',');
            
            if (columns.Length != 4)
            {
                hasColumnError = true;
                errorLines++;
                continue;
            }
            
            var title = columns[1].Trim();
            if (string.IsNullOrWhiteSpace(title))
            {
                hasEmptyTitleError = true;
                errorLines++;
                continue;
            }
            
            var description = columns[2].Trim();
            var tags = columns[3].Trim();
            
            uploadInfos.Add((title, description, tags));
        }
        
        // 유효한 데이터가 있으면 경고만 표시
        if (uploadInfos.Count > 0)
        {
            if (errorLines > 0)
            {
                var warnings = new List<string>();
                if (hasColumnError) warnings.Add("컬럼 수 오류");
                if (hasEmptyTitleError) warnings.Add("빈 제목");
                
                var warningMsg = $"⚠️ 일부 오류 발견 ({errorLines}/{totalLines}줄)\n" +
                                $"문제: {string.Join(", ", warnings)}\n" +
                                $"✅ {uploadInfos.Count}개는 정상 로드됨";
                return (true, warningMsg, uploadInfos);
            }
            return (true, "", uploadInfos);
        }
        
        return (false, "❌ 유효한 업로드 정보가 없습니다", uploadInfos);
    }

    private List<UploadInfoItem> ParseUploadInfoCsv(string content)
    {
        var list = new List<UploadInfoItem>();
        var lines = content.Split('\n');

        foreach (var line in lines)
        {
            if (string.IsNullOrWhiteSpace(line)) continue;

            var parts = line.Split(',');
            if (parts.Length >= 3)
            {
                list.Add(new UploadInfoItem
                {
                    Title = parts[0].Trim(),
                    Description = parts[1].Trim(),
                    Tags = parts[2].Trim()
                });
            }
        }

        return list;
    }

    private void OnVideoCountChanged()
    {
        UpdateSchedulePreview();
    }

    private void UpdateSchedulePreview()
    {
        int totalVideos = genOptions.IsGenerateVideo ? genOptions.VideoCount : genOptions.LocalVideoFiles.Count;
        if (totalVideos == 0) return;

        schedulePreviewList.Clear();
        savedScheduleTimes.Clear();

        DateTime startTime = DateTime.Now.AddMinutes(5);
        DateTime endTime = startTime.AddHours(scheduleHours);

        for (int i = 0; i < totalVideos; i++)
        {
            DateTime scheduledTime = CalculateScheduleTime(startTime, endTime, i, totalVideos, minIntervalMinutes);
            
            schedulePreviewList.Add(new SchedulePreviewItem
            {
                Index = i + 1,
                ScheduledTime = scheduledTime
            });
            
            savedScheduleTimes[i] = scheduledTime;
        }

        schedulePreviewList = schedulePreviewList.OrderBy(x => x.ScheduledTime).ToList();
        StateHasChanged();
    }

    private DateTime CalculateScheduleTime(DateTime startTime, DateTime endTime, int index, int totalCount, int minIntervalMinutes)
    {
        var random = new Random();
        double totalMinutes = (endTime - startTime).TotalMinutes;
        double segmentMinutes = totalMinutes / totalCount;

        double segmentStart = index * segmentMinutes;
        double segmentEnd = Math.Min((index + 1) * segmentMinutes, totalMinutes);

        double randomMinutes = segmentStart + (random.NextDouble() * (segmentEnd - segmentStart));

        if (index > 0 && totalMinutes > (totalCount * minIntervalMinutes))
        {
            var previousTime = startTime.AddMinutes(segmentStart);
            var proposedTime = startTime.AddMinutes(randomMinutes);

            if ((proposedTime - previousTime).TotalMinutes < minIntervalMinutes)
            {
                randomMinutes = segmentStart + minIntervalMinutes;
            }
        }

        randomMinutes = Math.Min(randomMinutes, totalMinutes);
        return startTime.AddMinutes(randomMinutes);
    }

    // 🔥 메인 실행 로직 - 통합 서비스 사용
    private async Task StartAllInOne()
    {
        if (!CanStart) return;

        if (genOptions.IsGenerateVideo)
        {
            var config = ConfigManager.GetConfig();
            if (string.IsNullOrEmpty(config.ReplicateApiKey))
            {
                bool useLocal = await JSRuntime.InvokeAsync<bool>("confirm",
                    "⚠️ Replicate API 키가 설정되지 않았습니다.\n\n" +
                    "AI 영상 생성을 하려면 API 키가 필요합니다.\n\n" +
                    "옵션을 선택해주세요:\n\n" +
                    "• [확인] → 로컬 파일 사용 모드로 전환\n" +
                    "• [취소] → 기본 설정 페이지로 이동\n\n" +
                    "로컬 파일 모드로 전환하시겠습니까?");
                
                if (useLocal)
                {
                    genOptions.IsGenerateVideo = false;
                    StateHasChanged();
                    await JSRuntime.InvokeVoidAsync("alert", 
                        "📁 로컬 파일 모드로 전환되었습니다.\n\n" +
                        "이제 처리할 영상 파일을 선택해주세요.");
                    return;
                }
                else
                {
                    return;
                }
            }
        }

        if (postOptions.EnablePostProcessing)
        {
            bool proceed = await JSRuntime.InvokeAsync<bool>("confirm",
                "⚠️ 후처리를 사용하면 시간이 더 걸립니다.\n\n계속하시겠습니까?");
            if (!proceed)
            {
                postOptions.EnablePostProcessing = false;
                return;
            }
        }

        isRunning = true;
        isCancelled = false;
        currentProgress = 0;
        generatedVideos.Clear();
        resultMessage = "";
        isResultError = false;

        try
        {
            int totalVideos = genOptions.IsGenerateVideo ? genOptions.VideoCount : genOptions.LocalVideoFiles.Count;
            
            // 🔥 AI 생성 + 스케줄 업로드: 생성 정보만 등록
            if (genOptions.IsGenerateVideo && isScheduleUpload)
            {
                statusMessage = "스케줄 준비 중...";
                currentProgress = 50;
                StateHasChanged();

                await RegisterToSchedule();

                currentProgress = 100;
                statusMessage = "스케줄 등록 완료";
                hasActiveSchedule = true;
                StartScheduleStatusTracking();
            }
            // 🔥 AI 생성 + 즉시 업로드: 미리 생성
            else if (genOptions.IsGenerateVideo && !isScheduleUpload)
            {
                statusMessage = "영상 생성을 시작합니다...";
                StateHasChanged();

                // 🔥 ProcessingService 사용
                var processingOptions = new VideoPostProcessingService.ProcessingOptions
                {
                    GenerationOptions = genOptions,
                    PostProcessingOptions = postOptions
                };

                var videoResults = await ProcessingService.ProcessVideosAsync(
                    processingOptions,
                    (current, total, status) => {
                        currentProgress = (current * 80 / total);
                        statusMessage = status;
                        currentPromptUsed = status;
                        StateHasChanged();
                    },
                    CancellationToken.None
                );

                foreach (var result in videoResults.Where(r => r.Success))
                {
                    generatedVideos.Add(new GeneratedVideo
                    {
                        FileName = result.FileName,
                        FilePath = result.FilePath,
                        IsScheduled = false
                    });
                }

                if (!isCancelled && generatedVideos.Count > 0)
                {
                    currentProgress = 80;
                    statusMessage = "즉시 업로드 시작...";
                    StateHasChanged();

                    await ImmediateUpload();
                }
            }
            // 🔥 로컬 파일 처리
            else
            {
                var processingOptions = new VideoPostProcessingService.ProcessingOptions
                {
                    GenerationOptions = genOptions,
                    PostProcessingOptions = postOptions
                };

                var videoResults = await ProcessingService.ProcessVideosAsync(
                    processingOptions,
                    (current, total, status) => {
                        currentProgress = (current * 60 / total);
                        statusMessage = status;
                        StateHasChanged();
                    },
                    CancellationToken.None
                );

                foreach (var result in videoResults.Where(r => r.Success))
                {
                    generatedVideos.Add(new GeneratedVideo
                    {
                        FileName = result.FileName,
                        FilePath = result.FilePath,
                        IsScheduled = false
                    });
                }

                if (!isCancelled && generatedVideos.Count > 0)
                {
                    if (isScheduleUpload)
                    {
                        currentProgress = 70;
                        statusMessage = "YouTube 스케줄에 등록 중...";
                        StateHasChanged();

                        await RegisterToSchedule();

                        currentProgress = 100;
                        statusMessage = "스케줄 등록 완료";

                        hasActiveSchedule = true;
                        StartScheduleStatusTracking();
                    }
                    else
                    {
                        currentProgress = 70;
                        statusMessage = "즉시 업로드 시작...";
                        StateHasChanged();

                        await ImmediateUpload();
                    }
                }
            }

            if (isCancelled)
            {
                statusMessage = "작업이 취소되었습니다.";
                resultMessage = "사용자에 의해 취소되었습니다.";
            }
            else if (!genOptions.IsGenerateVideo && generatedVideos.Count == 0)
            {
                statusMessage = "처리된 영상이 없습니다.";
                resultMessage = "처리할 수 있는 영상이 없었습니다.";
                isResultError = true;
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"All-in-One 실행 오류: {ex.Message}");
            statusMessage = $"오류 발생: {ex.Message}";
            resultMessage = $"오류로 인해 중단되었습니다: {ex.Message}";
            isResultError = true;
        }
        finally
        {
            isRunning = false;
            StateHasChanged();
        }
    }

    private string GetResultAlertClass() => isResultError ? "alert-danger" : "alert-success";
    private string GetResultTitle() => isResultError ? "오류 발생" : "All-in-One 완료!";

    private void StopAllInOne()
    {
        isCancelled = true;
        statusMessage = "중지 중...";
    }

    private async Task RegisterToSchedule()
    {
        if (isScheduleUpload)
        {
            DateTime startTime = DateTime.Now.AddMinutes(5);
            
            // 🔥 AI 생성 모드: 생성 정보만 전달
            if (genOptions.IsGenerateVideo)
            {
                var videoInfoList = new List<YouTubeUploadService.VideoGenerationInfo>();
                var random = new Random();
                
                for (int i = 0; i < genOptions.VideoCount; i++)
                {
                    string prompt = genOptions.CsvPrompts[random.Next(genOptions.CsvPrompts.Count)];
                    string? captionText = null;
                    
                    if (postOptions.EnablePostProcessing && postOptions.AddCaption)
                    {
                        if (postOptions.UseRandomCaption && postOptions.CaptionCsvList.Count > 0)
                        {
                            captionText = postOptions.CaptionCsvList[random.Next(postOptions.CaptionCsvList.Count)];
                        }
                        else
                        {
                            captionText = postOptions.CaptionText;
                        }
                    }
                    
                    string? musicFilePath = null;
                    if (postOptions.EnablePostProcessing && postOptions.AddBackgroundMusic && postOptions.SelectedMusicFiles.Count > 0)
                    {
                        var musicFile = postOptions.SelectedMusicFiles[random.Next(postOptions.SelectedMusicFiles.Count)];
                        string tempMusicDir = Path.Combine(Path.GetTempPath(), "YouTubeScheduledMusic");
                        Directory.CreateDirectory(tempMusicDir);
                        musicFilePath = Path.Combine(tempMusicDir, $"{DateTime.Now.Ticks}_{musicFile.Name}");
                        
                        using (var fileStream = new FileStream(musicFilePath, FileMode.Create))
                        {
                            await musicFile.OpenReadStream(maxAllowedSize: 50 * 1024 * 1024).CopyToAsync(fileStream);
                        }
                    }
                    
                    videoInfoList.Add(new YouTubeUploadService.VideoGenerationInfo
                    {
                        Prompt = prompt,
                        Duration = genOptions.SelectedDuration,
                        AspectRatio = genOptions.SelectedAspectRatio,
                        EnablePostProcessing = postOptions.EnablePostProcessing,
                        CaptionText = captionText,
                        CaptionPosition = postOptions.CaptionPosition,
                        CaptionSize = postOptions.CaptionSize,
                        CaptionColor = postOptions.CaptionColor,
                        AddBackgroundMusic = postOptions.AddBackgroundMusic,
                        MusicFilePath = musicFilePath,
                        MusicVolume = postOptions.MusicVolume
                    });
                }

                if (useRandomUploadInfo && uploadInfoCsvList.Count > 0)
                {
                    uploadOptions.UseRandomInfo = true;
                    uploadOptions.RandomTitles = uploadInfoCsvList.Select(item => item.Title).ToList();
                    uploadOptions.RandomDescriptions = uploadInfoCsvList.Select(item => item.Description).ToList();
                    uploadOptions.RandomTags = uploadInfoCsvList.Select(item => item.Tags).ToList();
                }

                // 🔥 통합 서비스 사용
                var scheduleSettings = new UploadScheduleService.ScheduleSettings
                {
                    Hours = scheduleHours,
                    MinIntervalMinutes = minIntervalMinutes,
                    RandomizeOrder = randomizeOrder,
                    ScheduledTimes = savedScheduleTimes
                };

                SchedulerService.RegisterScheduledUploadWithGeneration(
                    videoInfoList,
                    uploadOptions,
                    scheduleSettings
                );
            }
            // 로컬 파일 또는 이미 생성된 파일
            else
            {
                var filePaths = generatedVideos.Select(v => v.FilePath).ToList();

                if (useRandomUploadInfo && uploadInfoCsvList.Count > 0)
                {
                    uploadOptions.UseRandomInfo = true;
                    uploadOptions.RandomTitles = uploadInfoCsvList.Select(item => item.Title).ToList();
                    uploadOptions.RandomDescriptions = uploadInfoCsvList.Select(item => item.Description).ToList();
                    uploadOptions.RandomTags = uploadInfoCsvList.Select(item => item.Tags).ToList();
                }

                // 🔥 통합 서비스 사용
                var scheduleSettings = new UploadScheduleService.ScheduleSettings
                {
                    Hours = scheduleHours,
                    MinIntervalMinutes = minIntervalMinutes,
                    RandomizeOrder = randomizeOrder,
                    ScheduledTimes = savedScheduleTimes
                };

                var request = new UploadScheduleService.UploadRequest
                {
                    FilePaths = filePaths,
                    UploadOptions = uploadOptions,
                    IsScheduledUpload = true,
                    Schedule = scheduleSettings
                };

                SchedulerService.RegisterScheduledUpload(request);

                foreach (var video in generatedVideos)
                {
                    video.IsScheduled = true;
                }
            }
        }
    }

    private async Task ImmediateUpload()
    {
        try
        {
            var filePaths = generatedVideos.Select(v => v.FilePath).ToList();
            
            if (useRandomUploadInfo && uploadInfoCsvList.Count > 0)
            {
                uploadOptions.UseRandomInfo = true;
                uploadOptions.RandomTitles = uploadInfoCsvList.Select(item => item.Title).ToList();
                uploadOptions.RandomDescriptions = uploadInfoCsvList.Select(item => item.Description).ToList();
                uploadOptions.RandomTags = uploadInfoCsvList.Select(item => item.Tags).ToList();
            }
            
            // 🔥 통합 서비스 사용
            var request = new UploadScheduleService.UploadRequest
            {
                FilePaths = filePaths,
                UploadOptions = uploadOptions,
                IsScheduledUpload = false,
                Schedule = null
            };

            var results = await SchedulerService.UploadImmediatelyAsync(
                request,
                (current, total, fileName) => {
                    InvokeAsync(() => {
                        statusMessage = $"업로드 중... ({current}/{total}) {fileName}";
                        currentProgress = 85 + (current * 15 / total);
                        StateHasChanged();
                    });
                }
            );

            foreach (var video in generatedVideos)
            {
                video.IsScheduled = true;
            }

            statusMessage = $"즉시 업로드 완료!";
        }
        catch (Exception ex)
        {
            Console.WriteLine($"즉시 업로드 실패: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", $"업로드 실패: {ex.Message}");
        }
    }

    private void StartScheduleStatusTracking()
    {
        scheduleStatusTimer = new System.Timers.Timer(30000);
        scheduleStatusTimer.Elapsed += CheckScheduleStatus;
        scheduleStatusTimer.AutoReset = true;
        scheduleStatusTimer.Start();
    }

    private void CheckScheduleStatus(object sender, System.Timers.ElapsedEventArgs e)
    {
        try
        {
            int queueCount = ScheduledUploadService.GetQueueCount();
            var allItems = ScheduledUploadService.GetAllScheduledItems();
    
            InvokeAsync(() =>
            {
                if (queueCount == 0 && hasActiveSchedule)
                {
                    hasActiveSchedule = false;
                    scheduleStatusTimer?.Stop();
                    scheduleStatusTimer?.Dispose();
                    scheduleStatusTimer = null;
    
                    statusMessage = "스케줄 업로드 대기 중...";
                    nextUploadInfo = "";
                }
                else if (hasActiveSchedule)
                {
                    statusMessage = $"스케줄 업로드 진행 중... (대기: {queueCount}개)";
    
                    var nextUpload = allItems
                        .Where(x => x.Status == "대기 중" || x.Status == "생성 완료")
                        .OrderBy(x => x.ScheduledTime)
                        .FirstOrDefault();
    
                    if (nextUpload != null)
                    {
                        var timeUntil = nextUpload.ScheduledTime - DateTime.Now;
                        if (timeUntil.TotalMinutes > 0)
                        {
                            string fileName = nextUpload.FileName.Length > 30 
                                ? nextUpload.FileName.Substring(0, 27) + "..."
                                : nextUpload.FileName;
    
                            if (timeUntil.TotalHours >= 1)
                            {
                                nextUploadInfo = $"{fileName} - {nextUpload.ScheduledTime:MM/dd HH:mm} ({timeUntil.Hours}시간 {timeUntil.Minutes}분 후)";
                            }
                            else
                            {
                                nextUploadInfo = $"{fileName} - {nextUpload.ScheduledTime:MM/dd HH:mm} ({(int)timeUntil.TotalMinutes}분 후)";
                            }
                        }
                        else
                        {
                            nextUploadInfo = $"{nextUpload.FileName} - 곧 업로드 예정";
                        }
                    }
                    else
                    {
                        nextUploadInfo = "";
                    }
                }
    
                StateHasChanged();
            });
        }
        catch (Exception ex)
        {
            Console.WriteLine($"스케줄 상태 확인 오류: {ex.Message}");
        }
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        ScheduledUploadService.OnAllUploadsCompleted += HandleAllUploadsCompleted;
    }

    private async void HandleAllUploadsCompleted(int successCount, int totalCount, List<ScheduledUploadItem> completedItems)
    {
        await InvokeAsync(async () =>
        {
            Console.WriteLine($"[All-in-One] 전체 업로드 완료 이벤트 수신 - {successCount}/{totalCount} 성공");
            
            isResultError = (successCount < totalCount);
            
            resultMessage = $"모든 작업이 완료되었습니다!\n\n" +
                           $"✅ 성공: {successCount}개\n" +
                           $"❌ 실패: {totalCount - successCount}개\n" +
                           $"📊 전체: {totalCount}개";
            
            string alertMessage = $"🎉 All-in-One 완료!\n\n" +
                                 $"✅ 성공: {successCount}개\n" +
                                 $"❌ 실패: {totalCount - successCount}개\n" +
                                 $"📊 전체: {totalCount}개\n\n";
            
            var successfulItems = completedItems.Where(x => x.Status == "완료" && !string.IsNullOrEmpty(x.UploadedUrl)).Take(3).ToList();
            if (successfulItems.Any())
            {
                alertMessage += "업로드된 영상:\n";
                foreach (var item in successfulItems)
                {
                    alertMessage += $"• {item.Title}\n";
                }
            }
            
            await JSRuntime.InvokeVoidAsync("alert", alertMessage);
            
            StateHasChanged();
        });
    }

    public void Dispose()
    {
        ScheduledUploadService.OnAllUploadsCompleted -= HandleAllUploadsCompleted;
        scheduleStatusTimer?.Stop();
        scheduleStatusTimer?.Dispose();
    }
}
