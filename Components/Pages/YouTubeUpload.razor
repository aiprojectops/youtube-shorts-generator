@page "/youtube-upload"
@rendermode InteractiveServer
@using YouTubeShortsWebApp
@using YouTubeShortsWebApp.Services
@inject IJSRuntime JSRuntime
@inject UploadScheduleService SchedulerService
@inject YouTubeUploadService YouTubeService

<PageTitle>YouTube 업로드</PageTitle>

<h1>YouTube 업로드</h1>

<div class="container">
    <div class="row">
        <div class="col-md-8">

            <!-- 파일 선택 섹션 -->
            <div class="card mb-4">
                <div class="card-header">
                    <h4>비디오 파일 선택</h4>
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <label class="form-label"><strong>비디오 파일들:</strong></label>
                        <InputFile OnChange="HandleFileSelection" accept="video/*" multiple class="form-control" disabled="@isUploading" />
                        <div class="form-text">하나 또는 여러 개의 비디오 파일을 선택하세요 (각각 최대 2GB)</div>
                    </div>

                    @if (selectedFiles.Count > 0)
                    {
                        <div class="alert alert-info">
                            <strong>선택된 파일:</strong> @selectedFiles.Count 개
                            <ul class="mb-0 mt-2">
                                @foreach (var file in selectedFiles.Take(5))
                                {
                                    <li>@file.Name (@VideoGenerationService.FormatFileSize(file.Size))</li>
                                }
                                @if (selectedFiles.Count > 5)
                                {
                                    <li>... 외 @(selectedFiles.Count - 5)개 더</li>
                                }
                            </ul>
                        </div>
                    }
                </div>
            </div>

            <!-- YouTube 인증 섹션 -->
            <div class="card mb-4">
                <div class="card-header">
                    <h4>YouTube 계정 연동</h4>
                </div>
                <div class="card-body">
                    @if (YouTubeService.CurrentAccount == null)
                    {
                        <button type="button" class="btn btn-danger" @onclick="AuthenticateYouTube" disabled="@(isAuthenticating || isUploading)">
                            <i class="bi bi-youtube"></i> YouTube 계정 연동하기
                        </button>
                        <div class="form-text mt-2">업로드하려면 먼저 YouTube 계정을 연동해야 합니다.</div>
                    }
                    else
                    {
                        <div class="alert alert-success">
                            <h6>✅ 연동된 계정</h6>
                            <p class="mb-1"><strong>채널:</strong> @YouTubeService.CurrentAccount.ChannelTitle</p>
                            <p class="mb-1"><strong>구독자:</strong> @YouTubeService.CurrentAccount.SubscriberCount.ToString("N0") 명</p>
                            <button type="button" class="btn btn-sm btn-outline-secondary mt-2" @onclick="SwitchAccount" disabled="@isUploading">
                                다른 계정으로 전환
                            </button>
                        </div>
                    }
                </div>
            </div>

            <!-- 업로드 설정 섹션 -->
            <div class="card mb-4">
                <div class="card-header">
                    <h4>업로드 정보 설정</h4>
                </div>
                <div class="card-body">
                    <!-- 랜덤 업로드 정보 사용 옵션 -->
                    <div class="mb-3">
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" @bind="useRandomUploadInfo" 
                                   @bind:after="OnRandomUploadInfoChanged" id="useRandomUploadInfo" disabled="@isUploading">
                            <label class="form-check-label" for="useRandomUploadInfo">
                                <strong>랜덤 업로드 정보 사용 (CSV)</strong>
                            </label>
                        </div>
                    </div>

                    @if (useRandomUploadInfo)
                    {
                        <!-- CSV 업로드 -->
                        <div class="mb-3">
                            <label class="form-label">업로드 정보 CSV 파일:</label>
                            <InputFile OnChange="HandleUploadInfoCsvSelection" accept=".csv" class="form-control" disabled="@isUploading" />
                            <div class="form-text">
                                CSV 형식: 제목,설명,태그 (각 줄마다 하나의 업로드 정보)
                            </div>
                            
                            @if (uploadInfoCsvList.Count > 0)
                            {
                                <div class="alert alert-success mt-2">
                                    ✅ @uploadInfoCsvList.Count 개 업로드 정보 로드됨
                                    <button type="button" class="btn btn-sm btn-primary ms-2" @onclick="() => showUploadInfoCsvPreview = true">미리보기</button>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <!-- 기본 업로드 정보 입력 -->
                        <div class="mb-3">
                            <label class="form-label"><strong>제목:</strong></label>
                            <input type="text" class="form-control" @bind="uploadOptions.TitleTemplate" 
                                   placeholder="영상 제목 입력..." disabled="@isUploading" />
                            <div class="form-text">여러 파일 업로드 시 자동으로 번호가 추가됩니다</div>
                        </div>

                        <div class="mb-3">
                            <label class="form-label"><strong>설명:</strong></label>
                            <textarea class="form-control" rows="3" @bind="uploadOptions.Description" 
                                      placeholder="영상 설명 입력..." disabled="@isUploading"></textarea>
                        </div>

                        <div class="mb-3">
                            <label class="form-label"><strong>태그 (쉼표로 구분):</strong></label>
                            <input type="text" class="form-control" @bind="uploadOptions.Tags" 
                                   placeholder="tag1, tag2, tag3" disabled="@isUploading" />
                        </div>
                    }

                    <!-- 공개 설정 -->
                    <div class="mb-3">
                        <label class="form-label"><strong>공개 설정:</strong></label>
                        <select class="form-select" @bind="uploadOptions.PrivacySetting" disabled="@isUploading">
                            <option value="🔒 비공개">🔒 비공개</option>
                            <option value="🔗 링크 공유">🔗 링크 공유</option>
                            <option value="🌐 공개">🌐 공개</option>
                        </select>
                    </div>
                </div>
            </div>

            <!-- 업로드 방식 선택 -->
            <div class="card mb-4">
                <div class="card-header">
                    <h4>업로드 방식</h4>
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <div class="form-check">
                            <input class="form-check-input" type="radio" name="uploadMode" id="immediateUpload"
                                   @onchange="() => isScheduleUpload = false" checked="@(!isScheduleUpload)" disabled="@isUploading">
                            <label class="form-check-label" for="immediateUpload">
                                <strong>즉시 업로드</strong> - 선택한 파일들을 지금 바로 업로드
                            </label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input" type="radio" name="uploadMode" id="scheduledUpload"
                                   @onchange="() => isScheduleUpload = true" checked="@isScheduleUpload" disabled="@isUploading">
                            <label class="form-check-label" for="scheduledUpload">
                                <strong>스케줄 업로드</strong> - 지정한 시간에 자동으로 업로드
                            </label>
                        </div>
                    </div>

                    @if (isScheduleUpload)
                    {
                        <!-- 스케줄 설정 -->
                        <div class="row mb-3">
                            <div class="col-md-6">
                                <label class="form-label">분산 시간: @scheduleSettings.Hours 시간</label>
                                <input type="range" class="form-range" min="0.5" max="24" step="0.5" 
                                       @bind="scheduleSettings.Hours" @bind:after="UpdateSchedulePreview" disabled="@isUploading" />
                                <div class="form-text">@scheduleSettings.Hours 시간 동안 업로드 분산</div>
                            </div>
                            <div class="col-md-6">
                                <label class="form-label">최소 간격: @scheduleSettings.MinIntervalMinutes 분</label>
                                <input type="range" class="form-range" min="7" max="180" 
                                       @bind="scheduleSettings.MinIntervalMinutes" @bind:after="UpdateSchedulePreview" disabled="@isUploading" />
                                <div class="form-text">업로드 간 최소 @scheduleSettings.MinIntervalMinutes 분 간격</div>
                            </div>
                        </div>

                        <div class="mb-3">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" @bind="scheduleSettings.RandomizeOrder" 
                                       @bind:after="UpdateSchedulePreview" id="randomizeOrder" disabled="@isUploading">
                                <label class="form-check-label" for="randomizeOrder">
                                    업로드 순서 랜덤화
                                </label>
                            </div>
                        </div>

                        @if (schedulePreview.Count > 0 && selectedFiles.Count > 0)
                        {
                            <div class="alert alert-info">
                                <h6>📅 예상 업로드 스케줄:</h6>
                                <ul class="mb-0">
                                    @foreach (var item in schedulePreview.Take(5))
                                    {
                                        <li>영상 #@item.Index -> @item.ScheduledTime.ToString("MM/dd HH:mm")</li>
                                    }
                                    @if (schedulePreview.Count > 5)
                                    {
                                        <li>... 총 @schedulePreview.Count 개</li>
                                    }
                                </ul>
                            </div>
                        }
                    }
                </div>
            </div>

            <!-- 업로드 버튼 -->
            <div class="d-grid gap-2 mb-3">
                <button type="button" class="btn btn-success btn-lg" @onclick="StartUpload" disabled="@(!CanUpload || isUploading)">
                    @if (isUploading)
                    {
                        <span>업로드 중...</span>
                    }
                    else
                    {
                        <span>@(isScheduleUpload ? "스케줄 업로드 등록" : "즉시 업로드")</span>
                    }
                </button>
            </div>

            <!-- 진행률 표시 -->
            @if (isUploading)
            {
                <div class="alert alert-info">
                    <div class="progress mb-2">
                        <div class="progress-bar progress-bar-striped progress-bar-animated" style="width: @uploadProgress%"></div>
                    </div>
                    <div>@uploadStatus</div>
                </div>
            }

            <!-- 결과 표시 -->
            @if (!string.IsNullOrEmpty(uploadResult))
            {
                <div class="alert alert-success">
                    @uploadResult
                </div>
            }

            <!-- 스케줄 상태 표시 -->
            @if (!string.IsNullOrEmpty(scheduleStatus))
            {
                <div class="alert alert-info">
                    <strong>스케줄 상태:</strong> @scheduleStatus
                </div>
            }

        </div>
    </div>
</div>

<!-- 업로드 정보 CSV 미리보기 모달 -->
@if (showUploadInfoCsvPreview)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">업로드 정보 미리보기</h5>
                    <button type="button" class="btn-close" @onclick="() => showUploadInfoCsvPreview = false"></button>
                </div>
                <div class="modal-body">
                    <p><strong>총 @uploadInfoCsvList.Count 개의 업로드 정보가 로드되었습니다.</strong></p>
                    <div style="max-height: 400px; overflow-y: auto;">
                        @for (int i = 0; i < Math.Min(5, uploadInfoCsvList.Count); i++)
                        {
                            <div class="card mb-2">
                                <div class="card-body">
                                    <h6 class="card-title">@(i + 1). @uploadInfoCsvList[i].Title</h6>
                                    <p class="card-text small mb-1"><strong>설명:</strong> @uploadInfoCsvList[i].Description</p>
                                    <p class="card-text small mb-0"><strong>태그:</strong> @uploadInfoCsvList[i].Tags</p>
                                </div>
                            </div>
                        }
                        @if (uploadInfoCsvList.Count > 5)
                        {
                            <div class="text-muted text-center">... 외 @(uploadInfoCsvList.Count - 5) 개 더</div>
                        }
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="() => showUploadInfoCsvPreview = false">닫기</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    // 🔥 통합 서비스 사용
    private YouTubeUploadService.UploadOptions uploadOptions = new();
    private UploadScheduleService.ScheduleSettings scheduleSettings = new();

    // 파일 관련
    private List<IBrowserFile> selectedFiles = new();

    // 인증
    private bool isAuthenticating = false;

    // 업로드 상태
    private bool isUploading = false;
    private int uploadProgress = 0;
    private string uploadStatus = "";
    private string uploadResult = "";

    // 스케줄 관련
    private bool isScheduleUpload = false;
    private List<UploadScheduleService.SchedulePreviewItem> schedulePreview = new();
    private string scheduleStatus = "";

    // 랜덤 업로드 정보
    private bool useRandomUploadInfo = false;
    private List<UploadInfoItem> uploadInfoCsvList = new();
    private bool showUploadInfoCsvPreview = false;

    public class UploadInfoItem
    {
        public string Title { get; set; } = "";
        public string Description { get; set; } = "";
        public string Tags { get; set; } = "";
    }

    private bool CanUpload
    {
        get
        {
            if (selectedFiles.Count == 0) return false;
            if (!YouTubeService.IsAuthenticated) return false;
            
            if (useRandomUploadInfo)
            {
                return uploadInfoCsvList.Count > 0;
            }
            else
            {
                return !string.IsNullOrWhiteSpace(uploadOptions.TitleTemplate);
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
       
        // 🔥 UserId 초기화 (쿠키에서 로드 또는 생성) - 맨 먼저 실행!
        await YouTubeService.InitializeAsync();
        
        // OAuth 콜백 처리
        var uri = new Uri(await JSRuntime.InvokeAsync<string>("eval", "window.location.href"));
        var query = System.Web.HttpUtility.ParseQueryString(uri.Query);
        
        if (query["auth"] == "success")
        {
            await YouTubeService.CheckExistingAuthAsync();
            await JSRuntime.InvokeVoidAsync("alert", "YouTube 계정 연동 성공!");
        }
        else if (query["auth"] == "error")
        {
            string message = query["message"] ?? "알 수 없는 오류";
            await JSRuntime.InvokeVoidAsync("alert", $"YouTube 계정 연동 실패: {message}");
        }

        StateHasChanged();
    }

    private async Task AuthenticateYouTube()
    {
        try
        {
            isAuthenticating = true;
            string authUrl = await YouTubeService.GetAuthorizationUrlAsync(JSRuntime, "youtube-upload");
            await JSRuntime.InvokeVoidAsync("open", authUrl, "_self");
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"인증 실패: {ex.Message}");
        }
        finally
        {
            isAuthenticating = false;
        }
    }

    private async Task SwitchAccount()
    {
        bool confirm = await JSRuntime.InvokeAsync<bool>("confirm", "다른 계정으로 전환하시겠습니까?");
        if (!confirm) return;
        
        await YouTubeService.SwitchAccountAsync();
        StateHasChanged();
        
        await AuthenticateYouTube();
    }

    private async Task HandleFileSelection(InputFileChangeEventArgs e)
    {
        selectedFiles = e.GetMultipleFiles(20).ToList();
        
        if (isScheduleUpload && selectedFiles.Count > 0)
        {
            UpdateSchedulePreview();
        }
        
        StateHasChanged();
    }

    private void OnRandomUploadInfoChanged()
    {
        if (!useRandomUploadInfo)
        {
            uploadInfoCsvList.Clear();
        }
    }

    private async Task HandleUploadInfoCsvSelection(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file == null) return;

        try
        {
            using var stream = file.OpenReadStream();
            using var reader = new StreamReader(stream);
            var content = await reader.ReadToEndAsync();

            uploadInfoCsvList = ParseUploadInfoCsv(content);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"CSV 파일 로드 실패: {ex.Message}");
        }
    }

    private List<UploadInfoItem> ParseUploadInfoCsv(string content)
    {
        var list = new List<UploadInfoItem>();
        var lines = content.Split('\n');

        foreach (var line in lines)
        {
            if (string.IsNullOrWhiteSpace(line)) continue;

            var parts = line.Split(',');
            if (parts.Length >= 3)
            {
                list.Add(new UploadInfoItem
                {
                    Title = parts[0].Trim(),
                    Description = parts[1].Trim(),
                    Tags = parts[2].Trim()
                });
            }
        }

        return list;
    }

    private void UpdateSchedulePreview()
    {
        if (selectedFiles.Count == 0) return;

        // 🔥 통합 서비스 사용
        schedulePreview = SchedulerService.GenerateSchedulePreview(
            selectedFiles.Count,
            scheduleSettings
        );

        // Dictionary로 변환해서 저장
        scheduleSettings.ScheduledTimes = SchedulerService.ConvertPreviewToSchedule(schedulePreview);
        
        StateHasChanged();
    }

    // 🔥 메인 업로드 로직 - SchedulerService 사용
    private async Task StartUpload()
    {
        // 파일을 임시 저장
        var filePaths = await SaveFilesToTemp();

        // 랜덤 업로드 정보 설정
        if (useRandomUploadInfo && uploadInfoCsvList.Count > 0)
        {
            uploadOptions.UseRandomInfo = true;
            uploadOptions.RandomTitles = uploadInfoCsvList.Select(item => item.Title).ToList();
            uploadOptions.RandomDescriptions = uploadInfoCsvList.Select(item => item.Description).ToList();
            uploadOptions.RandomTags = uploadInfoCsvList.Select(item => item.Tags).ToList();
        }

        // 🔥 통합 서비스 요청 생성
        var request = new UploadScheduleService.UploadRequest
        {
            FilePaths = filePaths,
            UploadOptions = uploadOptions,
            IsScheduledUpload = isScheduleUpload,
            Schedule = scheduleSettings
        };

        // 검증
        var validation = SchedulerService.ValidateUploadRequest(request);
        if (!validation.IsValid)
        {
            await JSRuntime.InvokeVoidAsync("alert", validation.ErrorMessage);
            return;
        }

        isUploading = true;
        uploadResult = "";

        try
        {
            if (isScheduleUpload)
            {
                // 🔥 스케줄 업로드
                uploadStatus = "스케줄에 등록 중...";
                uploadProgress = 50;
                StateHasChanged();

                SchedulerService.RegisterScheduledUpload(request);

                uploadProgress = 100;
                uploadStatus = "스케줄 등록 완료";
                uploadResult = $"✅ {selectedFiles.Count}개 파일이 스케줄에 등록되었습니다!";
                scheduleStatus = SchedulerService.GetNextUploadInfo();
            }
            else
            {
                // 🔥 즉시 업로드
                var results = await SchedulerService.UploadImmediatelyAsync(
                    request,
                    (current, total, fileName) => {
                        uploadProgress = (current * 100 / total);
                        uploadStatus = $"업로드 중... ({current}/{total}) {fileName}";
                        StateHasChanged();
                    }
                );

                int successCount = results.Count(r => r.Success);
                uploadResult = $"✅ 총 {results.Count}개 중 {successCount}개 업로드 완료!";
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"업로드 오류: {ex.Message}");
            uploadResult = $"❌ 오류 발생: {ex.Message}";
        }
        finally
        {
            isUploading = false;
            StateHasChanged();
        }
    }

    private async Task<List<string>> SaveFilesToTemp()
    {
        var filePaths = new List<string>();

        for (int i = 0; i < selectedFiles.Count; i++)
        {
            var file = selectedFiles[i];
            string tempPath = Path.Combine(Path.GetTempPath(), $"{DateTime.Now.Ticks}_{file.Name}");

            uploadStatus = $"파일 준비 중... ({i + 1}/{selectedFiles.Count})";
            uploadProgress = (i * 20 / selectedFiles.Count);
            StateHasChanged();

            using (var fileStream = new FileStream(tempPath, FileMode.Create))
            {
                await file.OpenReadStream(maxAllowedSize: 2L * 1024 * 1024 * 1024).CopyToAsync(fileStream);
            }

            filePaths.Add(tempPath);
        }

        return filePaths;
    }
}
