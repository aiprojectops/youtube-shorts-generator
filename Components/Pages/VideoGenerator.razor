@page "/video-generator"
@rendermode InteractiveServer
@using YouTubeShortsWebApp
@using YouTubeShortsWebApp.Services
@using System.Diagnostics
@using System.IO
@inject IJSRuntime JSRuntime
@inject VideoPostProcessingService ProcessingService

<PageTitle>비디오 생성기</PageTitle>

<h1>YouTube Shorts 생성기</h1>

<div class="container">
    <div class="row">
        <div class="col-md-8">
            <div class="card">
                <div class="card-header">
                    <h3>비디오 생성 옵션</h3>
                </div>
                <div class="card-body">
                    @if (genOptions.IsGenerateVideo && string.IsNullOrEmpty(ConfigManager.GetConfig().ReplicateApiKey))
                    {
                        <div class="alert alert-warning alert-dismissible fade show" role="alert">
                            <strong>⚠️ API 키가 설정되지 않았습니다</strong>
                            <p class="mb-2 mt-2">AI 영상 생성을 사용하려면 Replicate API 키가 필요합니다.</p>
                            <div class="d-flex gap-2">
                                <a href="/settings" class="btn btn-sm btn-warning">⚙️ 설정하러 가기</a>
                                <button type="button" class="btn btn-sm btn-outline-secondary" @onclick="() => genOptions.IsGenerateVideo = false">
                                    📁 로컬 파일 모드로 전환
                                </button>
                            </div>
                            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                        </div>
                    }

                    <!-- 영상 소스 선택 -->
                    <div class="mb-4">
                        <label class="form-label"><strong>영상 소스:</strong></label>
                        <div class="form-check">
                            <input class="form-check-input" type="radio" name="videoSource" id="generateNewVideo"
                                   @onchange="() => genOptions.IsGenerateVideo = true" checked="@genOptions.IsGenerateVideo" disabled="@isGenerating">
                            <label class="form-check-label" for="generateNewVideo">
                                <strong>AI로 새로 생성</strong>
                            </label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input" type="radio" name="videoSource" id="useLocalVideo"
                                   @onchange="() => genOptions.IsGenerateVideo = false" checked="@(!genOptions.IsGenerateVideo)" disabled="@isGenerating">
                            <label class="form-check-label" for="useLocalVideo">
                                <strong>로컬 파일 후처리만</strong>
                            </label>
                        </div>
                    </div>

                    @if (genOptions.IsGenerateVideo)
                    {
                        <!-- AI 생성 옵션 -->
                        <div class="mb-3">
                            <label class="form-label"><strong>생성할 영상 개수: @genOptions.VideoCount 개</strong></label>
                            <input type="range" class="form-range" min="1" max="5" @bind="genOptions.VideoCount" disabled="@isGenerating" />
                            <div class="text-primary">총 비용: $@totalCost</div>
                        </div>

                        <div class="mb-3">
                            <label class="form-label"><strong>영상 길이: @genOptions.SelectedDuration 초</strong></label>
                            <input type="range" class="form-range" min="2" max="12" step="1" 
                                   value="@genOptions.SelectedDuration" @oninput="OnDurationInput" disabled="@isGenerating" />
                            <small class="text-muted">2초 ~ 12초</small>
                        </div>

                        <div class="mb-3">
                            <label class="form-label"><strong>화면 비율:</strong></label>
                            <div class="btn-group d-flex" role="group">
                                <button type="button" class="btn @GetAspectClass("9:16")" @onclick='() => genOptions.SelectedAspectRatio = "9:16"' disabled="@isGenerating">
                                    📱 세로 (쇼츠)
                                </button>
                                <button type="button" class="btn @GetAspectClass("16:9")" @onclick='() => genOptions.SelectedAspectRatio = "16:9"' disabled="@isGenerating">
                                    🖥️ 가로
                                </button>
                                <button type="button" class="btn @GetAspectClass("1:1")" @onclick='() => genOptions.SelectedAspectRatio = "1:1"' disabled="@isGenerating">
                                    ⬛ 정사각형
                                </button>
                            </div>
                        </div>

                        <!-- 프롬프트 CSV -->
                        <div class="mb-3">
                            <label class="form-label"><strong>프롬프트 CSV 파일:</strong></label>
                            <InputFile OnChange="HandleCsvSelection" accept=".csv,.txt" class="form-control" disabled="@isGenerating" />
                            <div class="form-text">각 줄마다 하나의 프롬프트를 입력한 CSV 파일</div>
                            
                            @if (genOptions.CsvPrompts.Count > 0)
                            {
                                <div class="alert alert-success mt-2">
                                    ✅ @genOptions.CsvPrompts.Count 개 프롬프트 로드됨
                                    <button type="button" class="btn btn-sm btn-primary ms-2" @onclick="() => showCsvPreview = true">미리보기</button>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <!-- 로컬 파일 선택 -->
                        <div class="mb-3">
                            <label class="form-label"><strong>로컬 비디오 파일:</strong></label>
                            <InputFile OnChange="HandleLocalFileSelection" accept="video/*" multiple class="form-control" disabled="@isGenerating" />
                            <div class="form-text">후처리할 비디오 파일을 선택하세요 (각각 최대 2GB)</div>

                            @if (genOptions.LocalVideoFiles.Count > 0)
                            {
                                <div class="alert alert-success mt-2">
                                    <strong>선택된 파일:</strong> @genOptions.LocalVideoFiles.Count 개
                                    <ul class="mb-0 mt-2">
                                        @foreach (var file in genOptions.LocalVideoFiles.Take(5))
                                        {
                                            <li>@file.Name (@VideoGenerationService.FormatFileSize(file.Size))</li>
                                        }
                                        @if (genOptions.LocalVideoFiles.Count > 5)
                                        {
                                            <li>... 외 @(genOptions.LocalVideoFiles.Count - 5)개 더</li>
                                        }
                                    </ul>
                                </div>
                            }
                        </div>
                    }

                    <!-- 후처리 옵션 -->
                    <div class="mb-3">
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" @bind="postOptions.EnablePostProcessing" id="enablePostProcessing" disabled="@isGenerating">
                            <label class="form-check-label" for="enablePostProcessing">
                                <strong>영상 후처리 사용</strong>
                            </label>
                        </div>
                    </div>

                    @if (postOptions.EnablePostProcessing)
                    {
                        <div class="card mb-3 bg-light">
                            <div class="card-body">
                                <h6>🎬 후처리 옵션</h6>

                                <!-- 캡션 추가 -->
                                <div class="mb-3">
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" @bind="postOptions.AddCaption" id="addCaption" disabled="@isGenerating">
                                        <label class="form-check-label" for="addCaption">캡션 추가</label>
                                    </div>
                                    
                                    @if (postOptions.AddCaption)
                                    {
                                        <div class="mt-2">
                                            <div class="form-check mb-2">
                                                <input class="form-check-input" type="checkbox" @bind="postOptions.UseRandomCaption" 
                                                       @bind:after="OnRandomCaptionChanged" id="useRandomCaption" disabled="@isGenerating">
                                                <label class="form-check-label" for="useRandomCaption">
                                                    랜덤 캡션 사용 (CSV)
                                                </label>
                                            </div>

                                            @if (postOptions.UseRandomCaption)
                                            {
                                                <InputFile OnChange="HandleCaptionCsvSelection" accept=".csv,.txt" class="form-control form-control-sm mb-2" disabled="@isGenerating" />
                                                @if (postOptions.CaptionCsvList.Count > 0)
                                                {
                                                    <div class="alert alert-success">
                                                        ✅ @postOptions.CaptionCsvList.Count 개 캡션 로드됨
                                                        <button type="button" class="btn btn-sm btn-primary ms-2" @onclick="() => showCaptionCsvPreview = true">미리보기</button>
                                                    </div>
                                                }
                                            }
                                            else
                                            {
                                                <input type="text" class="form-control form-control-sm mb-2" @bind="postOptions.CaptionText" disabled="@isGenerating"
                                                       placeholder="캡션 텍스트 입력..." />
                                            }

                                            <div class="row mt-2">
                                                <div class="col-md-4">
                                                    <select class="form-select form-select-sm" @bind="postOptions.CaptionPosition" disabled="@isGenerating">
                                                        <option value="top">상단</option>
                                                        <option value="center">중앙</option>
                                                        <option value="bottom">하단</option>
                                                        <option value="random">랜덤</option>
                                                    </select>
                                                </div>
                                                <div class="col-md-4">
                                                    <select class="form-select form-select-sm" @bind="postOptions.CaptionSize" disabled="@isGenerating">
                                                        <option value="60">작게</option>
                                                        <option value="80">보통</option>
                                                        <option value="120">크게</option>
                                                        <option value="random">랜덤</option>
                                                    </select>
                                                </div>
                                                <div class="col-md-4">
                                                    <select class="form-select form-select-sm" @bind="postOptions.CaptionColor" disabled="@isGenerating">
                                                        <option value="white">흰색</option>
                                                        <option value="yellow">노란색</option>
                                                        <option value="red">빨간색</option>
                                                        <option value="black">검은색</option>
                                                        <option value="random">랜덤</option>
                                                    </select>
                                                </div>
                                            </div>
                                        </div>
                                    }
                                </div>

                                <!-- 배경음악 추가 -->
                                <div class="mb-3">
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" @bind="postOptions.AddBackgroundMusic" id="addMusic" disabled="@isGenerating">
                                        <label class="form-check-label" for="addMusic">배경음악 추가</label>
                                    </div>
                                    
                                    @if (postOptions.AddBackgroundMusic)
                                    {
                                        <div class="mt-2">
                                            <InputFile OnChange="HandleMusicFileSelection" accept="audio/*" multiple class="form-control form-control-sm mb-2" disabled="@isGenerating" />
                                            @if (postOptions.SelectedMusicFiles.Count > 0)
                                            {
                                                <div class="alert alert-success">
                                                    ✅ @postOptions.SelectedMusicFiles.Count 개 음악 파일 선택됨
                                                </div>
                                            }
                                            
                                            <label class="form-label">볼륨: @((int)(postOptions.MusicVolume * 100))%</label>
                                            <input type="range" class="form-range" min="0" max="1" step="0.1" @bind="postOptions.MusicVolume" disabled="@isGenerating" />
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                    }

                    <!-- 생성 버튼 -->
                    <div class="d-grid gap-2">
                        <button class="btn btn-success btn-lg" @onclick="StartVideoGeneration" disabled="@(!CanGenerate || isGenerating)">
                            @if (isGenerating)
                            {
                                <span>생성 중...</span>
                            }
                            else
                            {
                                <span>영상 생성하기</span>
                            }
                        </button>
                    </div>

                    <!-- 진행률 표시 -->
                    @if (isGenerating)
                    {
                        <div class="mt-3">
                            <div class="progress">
                                <div class="progress-bar progress-bar-striped progress-bar-animated"
                                     style="width: @(currentProgress)%"></div>
                            </div>
                            <div class="mt-2 text-info">@statusMessage</div>
                            @if (!string.IsNullOrEmpty(currentPromptUsed))
                            {
                                <div class="mt-1 text-muted small">사용된 프롬프트: @currentPromptUsed</div>
                            }
                        </div>
                    }

                    <!-- 결과 표시 -->
                    @if (!string.IsNullOrEmpty(resultMessage))
                    {
                        <div class="alert alert-success mt-3">
                            <p>@resultMessage</p>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<!-- CSV 미리보기 모달 -->
@if (showCsvPreview)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">프롬프트 미리보기</h5>
                    <button type="button" class="btn-close" @onclick="() => showCsvPreview = false"></button>
                </div>
                <div class="modal-body">
                    <p><strong>총 @genOptions.CsvPrompts.Count 개의 프롬프트가 로드되었습니다.</strong></p>
                    <div style="max-height: 300px; overflow-y: auto;">
                        @for (int i = 0; i < Math.Min(10, genOptions.CsvPrompts.Count); i++)
                        {
                            <div class="mb-2">
                                <strong>@(i + 1).</strong> @genOptions.CsvPrompts[i]
                            </div>
                        }
                        @if (genOptions.CsvPrompts.Count > 10)
                        {
                            <div class="text-muted">... 외 @(genOptions.CsvPrompts.Count - 10) 개 더</div>
                        }
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="() => showCsvPreview = false">닫기</button>
                </div>
            </div>
        </div>
    </div>
}

<!-- 캡션 CSV 미리보기 모달 -->
@if (showCaptionCsvPreview)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">캡션 미리보기</h5>
                    <button type="button" class="btn-close" @onclick="() => showCaptionCsvPreview = false"></button>
                </div>
                <div class="modal-body">
                    <p><strong>총 @postOptions.CaptionCsvList.Count 개의 캡션이 로드되었습니다.</strong></p>
                    <div style="max-height: 300px; overflow-y: auto;">
                        @for (int i = 0; i < Math.Min(10, postOptions.CaptionCsvList.Count); i++)
                        {
                            <div class="mb-2">
                                <strong>@(i + 1).</strong> @postOptions.CaptionCsvList[i]
                            </div>
                        }
                        @if (postOptions.CaptionCsvList.Count > 10)
                        {
                            <div class="text-muted">... 외 @(postOptions.CaptionCsvList.Count - 10) 개 더</div>
                        }
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="() => showCaptionCsvPreview = false">닫기</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    // 🔥 통합 서비스 사용
    private VideoGenerationService.VideoGenerationOptions genOptions = new();
    private VideoGenerationService.PostProcessingOptions postOptions = new();

    // UI 상태
    private bool isGenerating = false;
    private string resultMessage = "";
    private int currentProgress = 0;
    private string statusMessage = "";
    private string currentPromptUsed = "";
    private bool showCsvPreview = false;
    private bool showCaptionCsvPreview = false;

    private string totalCost => (genOptions.VideoCount * genOptions.SelectedDuration * 0.15m).ToString("F2");

    private bool CanGenerate
    {
        get
        {
            if (genOptions.IsGenerateVideo)
            {
                return genOptions.CsvPrompts.Count > 0 && 
                       !string.IsNullOrEmpty(ConfigManager.GetConfig().ReplicateApiKey);
            }
            else
            {
                return genOptions.LocalVideoFiles.Count > 0;
            }
        }
    }

    private string GetAspectClass(string ratio) => 
        genOptions.SelectedAspectRatio == ratio ? "btn-primary" : "btn-outline-secondary";

    private void OnDurationInput(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int value))
        {
            genOptions.SelectedDuration = value;
        }
    }

    private void OnRandomCaptionChanged()
    {
        if (!postOptions.UseRandomCaption)
        {
            postOptions.CaptionCsvList.Clear();
        }
    }

    // CSV 파일 처리
    private async Task HandleCsvSelection(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file == null) return;

        try
        {
            using var stream = file.OpenReadStream();
            using var reader = new StreamReader(stream);
            var content = await reader.ReadToEndAsync();

            genOptions.CsvPrompts = content
                .Split('\n')
                .Select(line => line.Trim())
                .Where(line => !string.IsNullOrEmpty(line))
                .ToList();

            StateHasChanged();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"CSV 파일 로드 실패: {ex.Message}");
        }
    }

    private async Task HandleCaptionCsvSelection(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file == null) return;

        try
        {
            using var stream = file.OpenReadStream();
            using var reader = new StreamReader(stream);
            var content = await reader.ReadToEndAsync();

            postOptions.CaptionCsvList = content
                .Split('\n')
                .Select(line => line.Trim())
                .Where(line => !string.IsNullOrEmpty(line))
                .ToList();

            StateHasChanged();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"캡션 CSV 파일 로드 실패: {ex.Message}");
        }
    }

    private async Task HandleLocalFileSelection(InputFileChangeEventArgs e)
    {
        genOptions.LocalVideoFiles = e.GetMultipleFiles(10).ToList();
        StateHasChanged();
    }

    private async Task HandleMusicFileSelection(InputFileChangeEventArgs e)
    {
        postOptions.SelectedMusicFiles = e.GetMultipleFiles(10).ToList();
        StateHasChanged();
    }

    // 🔥 메인 생성 로직 - ProcessingService 사용
    private async Task StartVideoGeneration()
    {
        // 검증
        var validation = ProcessingService.ValidateOptions(new VideoPostProcessingService.ProcessingOptions
        {
            GenerationOptions = genOptions,
            PostProcessingOptions = postOptions
        });

        if (!validation.IsValid)
        {
            await JSRuntime.InvokeVoidAsync("alert", validation.ErrorMessage);
            return;
        }

        // 후처리 확인
        if (postOptions.EnablePostProcessing)
        {
            bool proceed = await JSRuntime.InvokeAsync<bool>("confirm", 
                "후처리를 사용하면 시간이 더 걸립니다. 계속하시겠습니까?");
            if (!proceed)
            {
                postOptions.EnablePostProcessing = false;
                return;
            }
        }

        isGenerating = true;
        resultMessage = "";
        currentProgress = 0;

        try
        {
            // 🔥 통합 서비스 사용
            var options = new VideoPostProcessingService.ProcessingOptions
            {
                GenerationOptions = genOptions,
                PostProcessingOptions = postOptions
            };

            var results = await ProcessingService.ProcessVideosAsync(
                options,
                (current, total, status) => {
                    currentProgress = (current * 90 / total);
                    statusMessage = status;
                    currentPromptUsed = status;
                    StateHasChanged();
                }
            );

            // 다운로드 처리
            int successCount = 0;
            foreach (var result in results.Where(r => r.Success))
            {
                string downloadFileName = $"video_{DateTime.Now:yyyyMMdd_HHmmss}_{successCount + 1:D2}.mp4";
                await TriggerBrowserDownload(result.FilePath, downloadFileName);
                successCount++;
            }

            currentProgress = 100;
            resultMessage = $"✅ 총 {results.Count}개 중 {successCount}개 영상 생성 완료!";
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"영상 생성 오류: {ex.Message}");
            resultMessage = $"❌ 오류 발생: {ex.Message}";
        }
        finally
        {
            isGenerating = false;
            StateHasChanged();
        }
    }

    private async Task TriggerBrowserDownload(string filePath, string fileName)
    {
        try
        {
            if (!File.Exists(filePath))
            {
                Console.WriteLine($"파일을 찾을 수 없습니다: {filePath}");
                return;
            }

            byte[] fileBytes = await File.ReadAllBytesAsync(filePath);
            string base64String = Convert.ToBase64String(fileBytes);
            
            fileBytes = null;
            GC.Collect();
            
            string dataUrl = $"data:video/mp4;base64,{base64String}";
            bool success = await JSRuntime.InvokeAsync<bool>("downloadFile", dataUrl, fileName);
            
            if (!success)
            {
                throw new Exception("브라우저 다운로드 실행 실패");
            }
        }
        catch (OutOfMemoryException)
        {
            await JSRuntime.InvokeVoidAsync("alert", "메모리 부족으로 다운로드할 수 없습니다.");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"다운로드 오류: {ex.Message}");
        }
    }
}
